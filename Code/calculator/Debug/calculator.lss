
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00002ab2  00002b26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000228c  00000000  00000000  00002b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ee2  00000000  00000000  00004de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000985c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000099bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 98 12 	call	0x2530	; 0x2530 <main>
      7a:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e6       	ldi	r26, 0x6F	; 111
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3c 15 	jmp	0x2a78	; 0x2a78 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 2c 15 	jmp	0x2a58	; 0x2a58 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 48 15 	jmp	0x2a90	; 0x2a90 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_enuInit>:
#include "DIO_priv.h"



ES_t DIO_enuInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	89 83       	std	Y+1, r24	; 0x01

#if DIO_PA0_DIR == DIO_u8INPUT
	DDRA &=~ (1<<0);
#elif DIO_PA0_DIR == DIO_u8OUTPUT
	DDRA |= (1<<0);
     b44:	aa e3       	ldi	r26, 0x3A	; 58
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	ea e3       	ldi	r30, 0x3A	; 58
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	81 60       	ori	r24, 0x01	; 1
     b50:	8c 93       	st	X, r24
#endif

	return Local_enuErrorState;
     b52:	89 81       	ldd	r24, Y+1	; 0x01
}
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction)
{
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	00 d0       	rcall	.+0      	; 0xb62 <DIO_enuSetPinDirection+0x6>
     b62:	00 d0       	rcall	.+0      	; 0xb64 <DIO_enuSetPinDirection+0x8>
     b64:	00 d0       	rcall	.+0      	; 0xb66 <DIO_enuSetPinDirection+0xa>
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	8a 83       	std	Y+2, r24	; 0x02
     b6c:	6b 83       	std	Y+3, r22	; 0x03
     b6e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	84 30       	cpi	r24, 0x04	; 4
     b78:	08 f0       	brcs	.+2      	; 0xb7c <DIO_enuSetPinDirection+0x20>
     b7a:	d0 c0       	rjmp	.+416    	; 0xd1c <DIO_enuSetPinDirection+0x1c0>
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	88 30       	cpi	r24, 0x08	; 8
     b80:	08 f0       	brcs	.+2      	; 0xb84 <DIO_enuSetPinDirection+0x28>
     b82:	cc c0       	rjmp	.+408    	; 0xd1c <DIO_enuSetPinDirection+0x1c0>
     b84:	8c 81       	ldd	r24, Y+4	; 0x04
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	08 f0       	brcs	.+2      	; 0xb8c <DIO_enuSetPinDirection+0x30>
     b8a:	c8 c0       	rjmp	.+400    	; 0xd1c <DIO_enuSetPinDirection+0x1c0>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& Copy_u8Direction<= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	3e 83       	std	Y+6, r19	; 0x06
     b94:	2d 83       	std	Y+5, r18	; 0x05
     b96:	6d 81       	ldd	r22, Y+5	; 0x05
     b98:	7e 81       	ldd	r23, Y+6	; 0x06
     b9a:	61 30       	cpi	r22, 0x01	; 1
     b9c:	71 05       	cpc	r23, r1
     b9e:	09 f4       	brne	.+2      	; 0xba2 <DIO_enuSetPinDirection+0x46>
     ba0:	41 c0       	rjmp	.+130    	; 0xc24 <DIO_enuSetPinDirection+0xc8>
     ba2:	8d 81       	ldd	r24, Y+5	; 0x05
     ba4:	9e 81       	ldd	r25, Y+6	; 0x06
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	91 05       	cpc	r25, r1
     baa:	34 f4       	brge	.+12     	; 0xbb8 <DIO_enuSetPinDirection+0x5c>
     bac:	2d 81       	ldd	r18, Y+5	; 0x05
     bae:	3e 81       	ldd	r19, Y+6	; 0x06
     bb0:	21 15       	cp	r18, r1
     bb2:	31 05       	cpc	r19, r1
     bb4:	71 f0       	breq	.+28     	; 0xbd2 <DIO_enuSetPinDirection+0x76>
     bb6:	b0 c0       	rjmp	.+352    	; 0xd18 <DIO_enuSetPinDirection+0x1bc>
     bb8:	6d 81       	ldd	r22, Y+5	; 0x05
     bba:	7e 81       	ldd	r23, Y+6	; 0x06
     bbc:	62 30       	cpi	r22, 0x02	; 2
     bbe:	71 05       	cpc	r23, r1
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <DIO_enuSetPinDirection+0x68>
     bc2:	59 c0       	rjmp	.+178    	; 0xc76 <DIO_enuSetPinDirection+0x11a>
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	9e 81       	ldd	r25, Y+6	; 0x06
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <DIO_enuSetPinDirection+0x74>
     bce:	7c c0       	rjmp	.+248    	; 0xcc8 <DIO_enuSetPinDirection+0x16c>
     bd0:	a3 c0       	rjmp	.+326    	; 0xd18 <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_u8GROUP_A:
			DDRA &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     bd2:	aa e3       	ldi	r26, 0x3A	; 58
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ea e3       	ldi	r30, 0x3A	; 58
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 c0       	rjmp	.+4      	; 0xbee <DIO_enuSetPinDirection+0x92>
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	2a 95       	dec	r18
     bf0:	e2 f7       	brpl	.-8      	; 0xbea <DIO_enuSetPinDirection+0x8e>
     bf2:	80 95       	com	r24
     bf4:	84 23       	and	r24, r20
     bf6:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction<<Copy_u8PinID);
     bf8:	aa e3       	ldi	r26, 0x3A	; 58
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e3       	ldi	r30, 0x3A	; 58
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	b9 01       	movw	r22, r18
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_enuSetPinDirection+0xbc>
     c14:	66 0f       	add	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	8a 95       	dec	r24
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_enuSetPinDirection+0xb8>
     c1c:	cb 01       	movw	r24, r22
     c1e:	84 2b       	or	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	7a c0       	rjmp	.+244    	; 0xd18 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     c24:	a7 e3       	ldi	r26, 0x37	; 55
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e3       	ldi	r30, 0x37	; 55
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_enuSetPinDirection+0xe4>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	2a 95       	dec	r18
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_enuSetPinDirection+0xe0>
     c44:	80 95       	com	r24
     c46:	84 23       	and	r24, r20
     c48:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction<<Copy_u8PinID);
     c4a:	a7 e3       	ldi	r26, 0x37	; 55
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e7 e3       	ldi	r30, 0x37	; 55
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	48 2f       	mov	r20, r24
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	28 2f       	mov	r18, r24
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	88 2f       	mov	r24, r24
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	b9 01       	movw	r22, r18
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_enuSetPinDirection+0x10e>
     c66:	66 0f       	add	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	8a 95       	dec	r24
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_enuSetPinDirection+0x10a>
     c6e:	cb 01       	movw	r24, r22
     c70:	84 2b       	or	r24, r20
     c72:	8c 93       	st	X, r24
     c74:	51 c0       	rjmp	.+162    	; 0xd18 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     c76:	a4 e3       	ldi	r26, 0x34	; 52
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e4 e3       	ldi	r30, 0x34	; 52
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	48 2f       	mov	r20, r24
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_enuSetPinDirection+0x136>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	2a 95       	dec	r18
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_enuSetPinDirection+0x132>
     c96:	80 95       	com	r24
     c98:	84 23       	and	r24, r20
     c9a:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction<<Copy_u8PinID);
     c9c:	a4 e3       	ldi	r26, 0x34	; 52
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e4 e3       	ldi	r30, 0x34	; 52
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	48 2f       	mov	r20, r24
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	88 2f       	mov	r24, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	b9 01       	movw	r22, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_enuSetPinDirection+0x160>
     cb8:	66 0f       	add	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	8a 95       	dec	r24
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_enuSetPinDirection+0x15c>
     cc0:	cb 01       	movw	r24, r22
     cc2:	84 2b       	or	r24, r20
     cc4:	8c 93       	st	X, r24
     cc6:	28 c0       	rjmp	.+80     	; 0xd18 <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     cc8:	a1 e3       	ldi	r26, 0x31	; 49
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e1 e3       	ldi	r30, 0x31	; 49
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <DIO_enuSetPinDirection+0x188>
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	2a 95       	dec	r18
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <DIO_enuSetPinDirection+0x184>
     ce8:	80 95       	com	r24
     cea:	84 23       	and	r24, r20
     cec:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction<<Copy_u8PinID);
     cee:	a1 e3       	ldi	r26, 0x31	; 49
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e1 e3       	ldi	r30, 0x31	; 49
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	b9 01       	movw	r22, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <DIO_enuSetPinDirection+0x1b2>
     d0a:	66 0f       	add	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	8a 95       	dec	r24
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <DIO_enuSetPinDirection+0x1ae>
     d12:	cb 01       	movw	r24, r22
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
     d18:	19 82       	std	Y+1, r1	; 0x01
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
}
     d22:	26 96       	adiw	r28, 0x06	; 6
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <DIO_enuSetPinValue+0x6>
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <DIO_enuSetPinValue+0x8>
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <DIO_enuSetPinValue+0xa>
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	8a 83       	std	Y+2, r24	; 0x02
     d44:	6b 83       	std	Y+3, r22	; 0x03
     d46:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	08 f0       	brcs	.+2      	; 0xd54 <DIO_enuSetPinValue+0x20>
     d52:	d3 c0       	rjmp	.+422    	; 0xefa <DIO_enuSetPinValue+0x1c6>
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 30       	cpi	r24, 0x08	; 8
     d58:	08 f0       	brcs	.+2      	; 0xd5c <DIO_enuSetPinValue+0x28>
     d5a:	cf c0       	rjmp	.+414    	; 0xefa <DIO_enuSetPinValue+0x1c6>
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	82 30       	cpi	r24, 0x02	; 2
     d60:	20 f0       	brcs	.+8      	; 0xd6a <DIO_enuSetPinValue+0x36>
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	08 f0       	brcs	.+2      	; 0xd6a <DIO_enuSetPinValue+0x36>
     d68:	c8 c0       	rjmp	.+400    	; 0xefa <DIO_enuSetPinValue+0x1c6>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8Value <= DIO_u8HIGH
					|| Copy_u8Value <= DIO_u8PULL_UP) )

	{
		switch (Copy_u8GroupID)
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3e 83       	std	Y+6, r19	; 0x06
     d72:	2d 83       	std	Y+5, r18	; 0x05
     d74:	6d 81       	ldd	r22, Y+5	; 0x05
     d76:	7e 81       	ldd	r23, Y+6	; 0x06
     d78:	61 30       	cpi	r22, 0x01	; 1
     d7a:	71 05       	cpc	r23, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <DIO_enuSetPinValue+0x4c>
     d7e:	41 c0       	rjmp	.+130    	; 0xe02 <DIO_enuSetPinValue+0xce>
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	91 05       	cpc	r25, r1
     d88:	34 f4       	brge	.+12     	; 0xd96 <DIO_enuSetPinValue+0x62>
     d8a:	2d 81       	ldd	r18, Y+5	; 0x05
     d8c:	3e 81       	ldd	r19, Y+6	; 0x06
     d8e:	21 15       	cp	r18, r1
     d90:	31 05       	cpc	r19, r1
     d92:	71 f0       	breq	.+28     	; 0xdb0 <DIO_enuSetPinValue+0x7c>
     d94:	b0 c0       	rjmp	.+352    	; 0xef6 <DIO_enuSetPinValue+0x1c2>
     d96:	6d 81       	ldd	r22, Y+5	; 0x05
     d98:	7e 81       	ldd	r23, Y+6	; 0x06
     d9a:	62 30       	cpi	r22, 0x02	; 2
     d9c:	71 05       	cpc	r23, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <DIO_enuSetPinValue+0x6e>
     da0:	59 c0       	rjmp	.+178    	; 0xe54 <DIO_enuSetPinValue+0x120>
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	91 05       	cpc	r25, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <DIO_enuSetPinValue+0x7a>
     dac:	7c c0       	rjmp	.+248    	; 0xea6 <DIO_enuSetPinValue+0x172>
     dae:	a3 c0       	rjmp	.+326    	; 0xef6 <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     db0:	ab e3       	ldi	r26, 0x3B	; 59
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e3       	ldi	r30, 0x3B	; 59
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	48 2f       	mov	r20, r24
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_enuSetPinValue+0x98>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	2a 95       	dec	r18
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_enuSetPinValue+0x94>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value<<Copy_u8PinID);
     dd6:	ab e3       	ldi	r26, 0x3B	; 59
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	eb e3       	ldi	r30, 0x3B	; 59
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	b9 01       	movw	r22, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_enuSetPinValue+0xc2>
     df2:	66 0f       	add	r22, r22
     df4:	77 1f       	adc	r23, r23
     df6:	8a 95       	dec	r24
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_enuSetPinValue+0xbe>
     dfa:	cb 01       	movw	r24, r22
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	7a c0       	rjmp	.+244    	; 0xef6 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     e02:	a8 e3       	ldi	r26, 0x38	; 56
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e8 e3       	ldi	r30, 0x38	; 56
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_enuSetPinValue+0xea>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	2a 95       	dec	r18
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_enuSetPinValue+0xe6>
     e22:	80 95       	com	r24
     e24:	84 23       	and	r24, r20
     e26:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value<<Copy_u8PinID);
     e28:	a8 e3       	ldi	r26, 0x38	; 56
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e3       	ldi	r30, 0x38	; 56
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	b9 01       	movw	r22, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_enuSetPinValue+0x114>
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	8a 95       	dec	r24
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_enuSetPinValue+0x110>
     e4c:	cb 01       	movw	r24, r22
     e4e:	84 2b       	or	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	51 c0       	rjmp	.+162    	; 0xef6 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     e54:	a5 e3       	ldi	r26, 0x35	; 53
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e5 e3       	ldi	r30, 0x35	; 53
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_enuSetPinValue+0x13c>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	2a 95       	dec	r18
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_enuSetPinValue+0x138>
     e74:	80 95       	com	r24
     e76:	84 23       	and	r24, r20
     e78:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value<<Copy_u8PinID);
     e7a:	a5 e3       	ldi	r26, 0x35	; 53
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e5 e3       	ldi	r30, 0x35	; 53
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	b9 01       	movw	r22, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_enuSetPinValue+0x166>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	8a 95       	dec	r24
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_enuSetPinValue+0x162>
     e9e:	cb 01       	movw	r24, r22
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	28 c0       	rjmp	.+80     	; 0xef6 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~ (DIO_BIT_MASK<<Copy_u8PinID);
     ea6:	a2 e3       	ldi	r26, 0x32	; 50
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e2 e3       	ldi	r30, 0x32	; 50
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_enuSetPinValue+0x18e>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	2a 95       	dec	r18
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_enuSetPinValue+0x18a>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value<<Copy_u8PinID);
     ecc:	a2 e3       	ldi	r26, 0x32	; 50
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e2 e3       	ldi	r30, 0x32	; 50
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	48 2f       	mov	r20, r24
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	b9 01       	movw	r22, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_enuSetPinValue+0x1b8>
     ee8:	66 0f       	add	r22, r22
     eea:	77 1f       	adc	r23, r23
     eec:	8a 95       	dec	r24
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_enuSetPinValue+0x1b4>
     ef0:	cb 01       	movw	r24, r22
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
     ef6:	19 82       	std	Y+1, r1	; 0x01
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
     efe:	89 81       	ldd	r24, Y+1	; 0x01
}
     f00:	26 96       	adiw	r28, 0x06	; 6
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <DIO_enuTogglePinValue+0x6>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <DIO_enuTogglePinValue+0x8>
     f1a:	0f 92       	push	r0
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	8a 83       	std	Y+2, r24	; 0x02
     f22:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <DIO_enuTogglePinValue+0x1e>
     f2e:	74 c0       	rjmp	.+232    	; 0x1018 <DIO_enuTogglePinValue+0x106>
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	88 30       	cpi	r24, 0x08	; 8
     f34:	08 f0       	brcs	.+2      	; 0xf38 <DIO_enuTogglePinValue+0x26>
     f36:	70 c0       	rjmp	.+224    	; 0x1018 <DIO_enuTogglePinValue+0x106>
			&& Copy_u8PinID <= DIO_u8PIN7)

	{
		switch (Copy_u8GroupID)
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	3d 83       	std	Y+5, r19	; 0x05
     f40:	2c 83       	std	Y+4, r18	; 0x04
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	91 05       	cpc	r25, r1
     f4a:	49 f1       	breq	.+82     	; 0xf9e <DIO_enuTogglePinValue+0x8c>
     f4c:	2c 81       	ldd	r18, Y+4	; 0x04
     f4e:	3d 81       	ldd	r19, Y+5	; 0x05
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	2c f4       	brge	.+10     	; 0xf60 <DIO_enuTogglePinValue+0x4e>
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	9d 81       	ldd	r25, Y+5	; 0x05
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	61 f0       	breq	.+24     	; 0xf76 <DIO_enuTogglePinValue+0x64>
     f5e:	5a c0       	rjmp	.+180    	; 0x1014 <DIO_enuTogglePinValue+0x102>
     f60:	2c 81       	ldd	r18, Y+4	; 0x04
     f62:	3d 81       	ldd	r19, Y+5	; 0x05
     f64:	22 30       	cpi	r18, 0x02	; 2
     f66:	31 05       	cpc	r19, r1
     f68:	71 f1       	breq	.+92     	; 0xfc6 <DIO_enuTogglePinValue+0xb4>
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	9d 81       	ldd	r25, Y+5	; 0x05
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	91 05       	cpc	r25, r1
     f72:	e9 f1       	breq	.+122    	; 0xfee <DIO_enuTogglePinValue+0xdc>
     f74:	4f c0       	rjmp	.+158    	; 0x1014 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^= (DIO_BIT_MASK<<Copy_u8PinID);
     f76:	ab e3       	ldi	r26, 0x3B	; 59
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	eb e3       	ldi	r30, 0x3B	; 59
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_enuTogglePinValue+0x82>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_enuTogglePinValue+0x7e>
     f98:	84 27       	eor	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	3b c0       	rjmp	.+118    	; 0x1014 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^= (DIO_BIT_MASK<<Copy_u8PinID);
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_enuTogglePinValue+0xaa>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_enuTogglePinValue+0xa6>
     fc0:	84 27       	eor	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	27 c0       	rjmp	.+78     	; 0x1014 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^= (DIO_BIT_MASK<<Copy_u8PinID);
     fc6:	a5 e3       	ldi	r26, 0x35	; 53
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e5 e3       	ldi	r30, 0x35	; 53
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_enuTogglePinValue+0xd2>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_enuTogglePinValue+0xce>
     fe8:	84 27       	eor	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	13 c0       	rjmp	.+38     	; 0x1014 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^= (DIO_BIT_MASK<<Copy_u8PinID);
     fee:	a2 e3       	ldi	r26, 0x32	; 50
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e2 e3       	ldi	r30, 0x32	; 50
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_enuTogglePinValue+0xfa>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_enuTogglePinValue+0xf6>
    1010:	84 27       	eor	r24, r20
    1012:	8c 93       	st	X, r24
			break;
		}

		Local_enuErrorState = ES_OK;
    1014:	19 82       	std	Y+1, r1	; 0x01
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	27 97       	sbiw	r28, 0x07	; 7
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	8a 83       	std	Y+2, r24	; 0x02
    1044:	6b 83       	std	Y+3, r22	; 0x03
    1046:	5d 83       	std	Y+5, r21	; 0x05
    1048:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	09 f4       	brne	.+2      	; 0x1058 <DIO_enuGetPinValue+0x2a>
    1056:	7d c0       	rjmp	.+250    	; 0x1152 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	84 30       	cpi	r24, 0x04	; 4
    105c:	08 f0       	brcs	.+2      	; 0x1060 <DIO_enuGetPinValue+0x32>
    105e:	76 c0       	rjmp	.+236    	; 0x114c <DIO_enuGetPinValue+0x11e>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	08 f0       	brcs	.+2      	; 0x1068 <DIO_enuGetPinValue+0x3a>
    1066:	72 c0       	rjmp	.+228    	; 0x114c <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)

		{
			switch (Copy_u8GroupID)
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3f 83       	std	Y+7, r19	; 0x07
    1070:	2e 83       	std	Y+6, r18	; 0x06
    1072:	4e 81       	ldd	r20, Y+6	; 0x06
    1074:	5f 81       	ldd	r21, Y+7	; 0x07
    1076:	41 30       	cpi	r20, 0x01	; 1
    1078:	51 05       	cpc	r21, r1
    107a:	59 f1       	breq	.+86     	; 0x10d2 <DIO_enuGetPinValue+0xa4>
    107c:	8e 81       	ldd	r24, Y+6	; 0x06
    107e:	9f 81       	ldd	r25, Y+7	; 0x07
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	91 05       	cpc	r25, r1
    1084:	34 f4       	brge	.+12     	; 0x1092 <DIO_enuGetPinValue+0x64>
    1086:	2e 81       	ldd	r18, Y+6	; 0x06
    1088:	3f 81       	ldd	r19, Y+7	; 0x07
    108a:	21 15       	cp	r18, r1
    108c:	31 05       	cpc	r19, r1
    108e:	69 f0       	breq	.+26     	; 0x10aa <DIO_enuGetPinValue+0x7c>
    1090:	5b c0       	rjmp	.+182    	; 0x1148 <DIO_enuGetPinValue+0x11a>
    1092:	4e 81       	ldd	r20, Y+6	; 0x06
    1094:	5f 81       	ldd	r21, Y+7	; 0x07
    1096:	42 30       	cpi	r20, 0x02	; 2
    1098:	51 05       	cpc	r21, r1
    109a:	79 f1       	breq	.+94     	; 0x10fa <DIO_enuGetPinValue+0xcc>
    109c:	8e 81       	ldd	r24, Y+6	; 0x06
    109e:	9f 81       	ldd	r25, Y+7	; 0x07
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <DIO_enuGetPinValue+0x7a>
    10a6:	3d c0       	rjmp	.+122    	; 0x1122 <DIO_enuGetPinValue+0xf4>
    10a8:	4f c0       	rjmp	.+158    	; 0x1148 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ((PINA >> Copy_u8PinID) & DIO_BIT_MASK);
    10aa:	e9 e3       	ldi	r30, 0x39	; 57
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a9 01       	movw	r20, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_enuGetPinValue+0x94>
    10be:	55 95       	asr	r21
    10c0:	47 95       	ror	r20
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_enuGetPinValue+0x90>
    10c6:	ca 01       	movw	r24, r20
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	ec 81       	ldd	r30, Y+4	; 0x04
    10cc:	fd 81       	ldd	r31, Y+5	; 0x05
    10ce:	80 83       	st	Z, r24
    10d0:	3b c0       	rjmp	.+118    	; 0x1148 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ((PINB >> Copy_u8PinID) & DIO_BIT_MASK);
    10d2:	e6 e3       	ldi	r30, 0x36	; 54
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	a9 01       	movw	r20, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_enuGetPinValue+0xbc>
    10e6:	55 95       	asr	r21
    10e8:	47 95       	ror	r20
    10ea:	8a 95       	dec	r24
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_enuGetPinValue+0xb8>
    10ee:	ca 01       	movw	r24, r20
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	ec 81       	ldd	r30, Y+4	; 0x04
    10f4:	fd 81       	ldd	r31, Y+5	; 0x05
    10f6:	80 83       	st	Z, r24
    10f8:	27 c0       	rjmp	.+78     	; 0x1148 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ((PINC >> Copy_u8PinID) & DIO_BIT_MASK);
    10fa:	e3 e3       	ldi	r30, 0x33	; 51
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a9 01       	movw	r20, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_enuGetPinValue+0xe4>
    110e:	55 95       	asr	r21
    1110:	47 95       	ror	r20
    1112:	8a 95       	dec	r24
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_enuGetPinValue+0xe0>
    1116:	ca 01       	movw	r24, r20
    1118:	81 70       	andi	r24, 0x01	; 1
    111a:	ec 81       	ldd	r30, Y+4	; 0x04
    111c:	fd 81       	ldd	r31, Y+5	; 0x05
    111e:	80 83       	st	Z, r24
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);
    1122:	e0 e3       	ldi	r30, 0x30	; 48
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_enuGetPinValue+0x10c>
    1136:	55 95       	asr	r21
    1138:	47 95       	ror	r20
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_enuGetPinValue+0x108>
    113e:	ca 01       	movw	r24, r20
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	ec 81       	ldd	r30, Y+4	; 0x04
    1144:	fd 81       	ldd	r31, Y+5	; 0x05
    1146:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1152:	83 e0       	ldi	r24, 0x03	; 3
    1154:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1156:	89 81       	ldd	r24, Y+1	; 0x01
}
    1158:	27 96       	adiw	r28, 0x07	; 7
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <LCD_enuInit>:
#include "LCD_config.h"

#include <util/delay.h>

ES_t LCD_enuInit(void)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	e9 97       	sbiw	r28, 0x39	; 57
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	89 af       	std	Y+57, r24	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	62 e0       	ldi	r22, 0x02	; 2
    1190:	41 e0       	ldi	r20, 0x01	; 1
    1192:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	62 e0       	ldi	r22, 0x02	; 2
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	66 e0       	ldi	r22, 0x06	; 6
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	65 e0       	ldi	r22, 0x05	; 5
    11ae:	41 e0       	ldi	r20, 0x01	; 1
    11b0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	64 e0       	ldi	r22, 0x04	; 4
    11b8:	41 e0       	ldi	r20, 0x01	; 1
    11ba:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	63 e0       	ldi	r22, 0x03	; 3
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	ac e0       	ldi	r26, 0x0C	; 12
    11ce:	b2 e4       	ldi	r27, 0x42	; 66
    11d0:	8d ab       	std	Y+53, r24	; 0x35
    11d2:	9e ab       	std	Y+54, r25	; 0x36
    11d4:	af ab       	std	Y+55, r26	; 0x37
    11d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d8:	6d a9       	ldd	r22, Y+53	; 0x35
    11da:	7e a9       	ldd	r23, Y+54	; 0x36
    11dc:	8f a9       	ldd	r24, Y+55	; 0x37
    11de:	98 ad       	ldd	r25, Y+56	; 0x38
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	4a e7       	ldi	r20, 0x7A	; 122
    11e6:	55 e4       	ldi	r21, 0x45	; 69
    11e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	89 ab       	std	Y+49, r24	; 0x31
    11f2:	9a ab       	std	Y+50, r25	; 0x32
    11f4:	ab ab       	std	Y+51, r26	; 0x33
    11f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11f8:	69 a9       	ldd	r22, Y+49	; 0x31
    11fa:	7a a9       	ldd	r23, Y+50	; 0x32
    11fc:	8b a9       	ldd	r24, Y+51	; 0x33
    11fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e8       	ldi	r20, 0x80	; 128
    1206:	5f e3       	ldi	r21, 0x3F	; 63
    1208:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    120c:	88 23       	and	r24, r24
    120e:	2c f4       	brge	.+10     	; 0x121a <LCD_enuInit+0xb0>
		__ticks = 1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	98 ab       	std	Y+48, r25	; 0x30
    1216:	8f a7       	std	Y+47, r24	; 0x2f
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <LCD_enuInit+0x12e>
	else if (__tmp > 65535)
    121a:	69 a9       	ldd	r22, Y+49	; 0x31
    121c:	7a a9       	ldd	r23, Y+50	; 0x32
    121e:	8b a9       	ldd	r24, Y+51	; 0x33
    1220:	9c a9       	ldd	r25, Y+52	; 0x34
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	3f ef       	ldi	r19, 0xFF	; 255
    1226:	4f e7       	ldi	r20, 0x7F	; 127
    1228:	57 e4       	ldi	r21, 0x47	; 71
    122a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    122e:	18 16       	cp	r1, r24
    1230:	4c f5       	brge	.+82     	; 0x1284 <LCD_enuInit+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1232:	6d a9       	ldd	r22, Y+53	; 0x35
    1234:	7e a9       	ldd	r23, Y+54	; 0x36
    1236:	8f a9       	ldd	r24, Y+55	; 0x37
    1238:	98 ad       	ldd	r25, Y+56	; 0x38
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e2       	ldi	r20, 0x20	; 32
    1240:	51 e4       	ldi	r21, 0x41	; 65
    1242:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	98 ab       	std	Y+48, r25	; 0x30
    1258:	8f a7       	std	Y+47, r24	; 0x2f
    125a:	0f c0       	rjmp	.+30     	; 0x127a <LCD_enuInit+0x110>
    125c:	80 e9       	ldi	r24, 0x90	; 144
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	9e a7       	std	Y+46, r25	; 0x2e
    1262:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1264:	8d a5       	ldd	r24, Y+45	; 0x2d
    1266:	9e a5       	ldd	r25, Y+46	; 0x2e
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <LCD_enuInit+0xfe>
    126c:	9e a7       	std	Y+46, r25	; 0x2e
    126e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1270:	8f a5       	ldd	r24, Y+47	; 0x2f
    1272:	98 a9       	ldd	r25, Y+48	; 0x30
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	98 ab       	std	Y+48, r25	; 0x30
    1278:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	8f a5       	ldd	r24, Y+47	; 0x2f
    127c:	98 a9       	ldd	r25, Y+48	; 0x30
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	69 f7       	brne	.-38     	; 0x125c <LCD_enuInit+0xf2>
    1282:	14 c0       	rjmp	.+40     	; 0x12ac <LCD_enuInit+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1284:	69 a9       	ldd	r22, Y+49	; 0x31
    1286:	7a a9       	ldd	r23, Y+50	; 0x32
    1288:	8b a9       	ldd	r24, Y+51	; 0x33
    128a:	9c a9       	ldd	r25, Y+52	; 0x34
    128c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	98 ab       	std	Y+48, r25	; 0x30
    1296:	8f a7       	std	Y+47, r24	; 0x2f
    1298:	8f a5       	ldd	r24, Y+47	; 0x2f
    129a:	98 a9       	ldd	r25, Y+48	; 0x30
    129c:	9c a7       	std	Y+44, r25	; 0x2c
    129e:	8b a7       	std	Y+43, r24	; 0x2b
    12a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <LCD_enuInit+0x13a>
    12a8:	9c a7       	std	Y+44, r25	; 0x2c
    12aa:	8b a7       	std	Y+43, r24	; 0x2b

#elif LCD_MODE == FOUR_BIT
	_delay_ms(35);

	//function set
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	WriteNLatch(0x28);
    12b6:	88 e2       	ldi	r24, 0x28	; 40
    12b8:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a0 e8       	ldi	r26, 0x80	; 128
    12c2:	bf e3       	ldi	r27, 0x3F	; 63
    12c4:	8f a3       	std	Y+39, r24	; 0x27
    12c6:	98 a7       	std	Y+40, r25	; 0x28
    12c8:	a9 a7       	std	Y+41, r26	; 0x29
    12ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12cc:	6f a1       	ldd	r22, Y+39	; 0x27
    12ce:	78 a5       	ldd	r23, Y+40	; 0x28
    12d0:	89 a5       	ldd	r24, Y+41	; 0x29
    12d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	4a e7       	ldi	r20, 0x7A	; 122
    12da:	55 e4       	ldi	r21, 0x45	; 69
    12dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	8b a3       	std	Y+35, r24	; 0x23
    12e6:	9c a3       	std	Y+36, r25	; 0x24
    12e8:	ad a3       	std	Y+37, r26	; 0x25
    12ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12ec:	6b a1       	ldd	r22, Y+35	; 0x23
    12ee:	7c a1       	ldd	r23, Y+36	; 0x24
    12f0:	8d a1       	ldd	r24, Y+37	; 0x25
    12f2:	9e a1       	ldd	r25, Y+38	; 0x26
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e8       	ldi	r20, 0x80	; 128
    12fa:	5f e3       	ldi	r21, 0x3F	; 63
    12fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1300:	88 23       	and	r24, r24
    1302:	2c f4       	brge	.+10     	; 0x130e <LCD_enuInit+0x1a4>
		__ticks = 1;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9a a3       	std	Y+34, r25	; 0x22
    130a:	89 a3       	std	Y+33, r24	; 0x21
    130c:	3f c0       	rjmp	.+126    	; 0x138c <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    130e:	6b a1       	ldd	r22, Y+35	; 0x23
    1310:	7c a1       	ldd	r23, Y+36	; 0x24
    1312:	8d a1       	ldd	r24, Y+37	; 0x25
    1314:	9e a1       	ldd	r25, Y+38	; 0x26
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	3f ef       	ldi	r19, 0xFF	; 255
    131a:	4f e7       	ldi	r20, 0x7F	; 127
    131c:	57 e4       	ldi	r21, 0x47	; 71
    131e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1322:	18 16       	cp	r1, r24
    1324:	4c f5       	brge	.+82     	; 0x1378 <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1326:	6f a1       	ldd	r22, Y+39	; 0x27
    1328:	78 a5       	ldd	r23, Y+40	; 0x28
    132a:	89 a5       	ldd	r24, Y+41	; 0x29
    132c:	9a a5       	ldd	r25, Y+42	; 0x2a
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e2       	ldi	r20, 0x20	; 32
    1334:	51 e4       	ldi	r21, 0x41	; 65
    1336:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9a a3       	std	Y+34, r25	; 0x22
    134c:	89 a3       	std	Y+33, r24	; 0x21
    134e:	0f c0       	rjmp	.+30     	; 0x136e <LCD_enuInit+0x204>
    1350:	80 e9       	ldi	r24, 0x90	; 144
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	98 a3       	std	Y+32, r25	; 0x20
    1356:	8f 8f       	std	Y+31, r24	; 0x1f
    1358:	8f 8d       	ldd	r24, Y+31	; 0x1f
    135a:	98 a1       	ldd	r25, Y+32	; 0x20
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <LCD_enuInit+0x1f2>
    1360:	98 a3       	std	Y+32, r25	; 0x20
    1362:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1364:	89 a1       	ldd	r24, Y+33	; 0x21
    1366:	9a a1       	ldd	r25, Y+34	; 0x22
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	9a a3       	std	Y+34, r25	; 0x22
    136c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136e:	89 a1       	ldd	r24, Y+33	; 0x21
    1370:	9a a1       	ldd	r25, Y+34	; 0x22
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	69 f7       	brne	.-38     	; 0x1350 <LCD_enuInit+0x1e6>
    1376:	14 c0       	rjmp	.+40     	; 0x13a0 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1378:	6b a1       	ldd	r22, Y+35	; 0x23
    137a:	7c a1       	ldd	r23, Y+36	; 0x24
    137c:	8d a1       	ldd	r24, Y+37	; 0x25
    137e:	9e a1       	ldd	r25, Y+38	; 0x26
    1380:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	9a a3       	std	Y+34, r25	; 0x22
    138a:	89 a3       	std	Y+33, r24	; 0x21
    138c:	89 a1       	ldd	r24, Y+33	; 0x21
    138e:	9a a1       	ldd	r25, Y+34	; 0x22
    1390:	9e 8f       	std	Y+30, r25	; 0x1e
    1392:	8d 8f       	std	Y+29, r24	; 0x1d
    1394:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1396:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <LCD_enuInit+0x22e>
    139c:	9e 8f       	std	Y+30, r25	; 0x1e
    139e:	8d 8f       	std	Y+29, r24	; 0x1d

#endif

	//display on/off
	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	WriteNLatch(0x0F);
    13aa:	8f e0       	ldi	r24, 0x0F	; 15
    13ac:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a0 e8       	ldi	r26, 0x80	; 128
    13b6:	bf e3       	ldi	r27, 0x3F	; 63
    13b8:	89 8f       	std	Y+25, r24	; 0x19
    13ba:	9a 8f       	std	Y+26, r25	; 0x1a
    13bc:	ab 8f       	std	Y+27, r26	; 0x1b
    13be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c0:	69 8d       	ldd	r22, Y+25	; 0x19
    13c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a e7       	ldi	r20, 0x7A	; 122
    13ce:	55 e4       	ldi	r21, 0x45	; 69
    13d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	8d 8b       	std	Y+21, r24	; 0x15
    13da:	9e 8b       	std	Y+22, r25	; 0x16
    13dc:	af 8b       	std	Y+23, r26	; 0x17
    13de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e0:	6d 89       	ldd	r22, Y+21	; 0x15
    13e2:	7e 89       	ldd	r23, Y+22	; 0x16
    13e4:	8f 89       	ldd	r24, Y+23	; 0x17
    13e6:	98 8d       	ldd	r25, Y+24	; 0x18
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	5f e3       	ldi	r21, 0x3F	; 63
    13f0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	2c f4       	brge	.+10     	; 0x1402 <LCD_enuInit+0x298>
		__ticks = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9c 8b       	std	Y+20, r25	; 0x14
    13fe:	8b 8b       	std	Y+19, r24	; 0x13
    1400:	3f c0       	rjmp	.+126    	; 0x1480 <LCD_enuInit+0x316>
	else if (__tmp > 65535)
    1402:	6d 89       	ldd	r22, Y+21	; 0x15
    1404:	7e 89       	ldd	r23, Y+22	; 0x16
    1406:	8f 89       	ldd	r24, Y+23	; 0x17
    1408:	98 8d       	ldd	r25, Y+24	; 0x18
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	4f e7       	ldi	r20, 0x7F	; 127
    1410:	57 e4       	ldi	r21, 0x47	; 71
    1412:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1416:	18 16       	cp	r1, r24
    1418:	4c f5       	brge	.+82     	; 0x146c <LCD_enuInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141a:	69 8d       	ldd	r22, Y+25	; 0x19
    141c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e2       	ldi	r20, 0x20	; 32
    1428:	51 e4       	ldi	r21, 0x41	; 65
    142a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <LCD_enuInit+0x2f8>
    1444:	80 e9       	ldi	r24, 0x90	; 144
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	9a 8b       	std	Y+18, r25	; 0x12
    144a:	89 8b       	std	Y+17, r24	; 0x11
    144c:	89 89       	ldd	r24, Y+17	; 0x11
    144e:	9a 89       	ldd	r25, Y+18	; 0x12
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <LCD_enuInit+0x2e6>
    1454:	9a 8b       	std	Y+18, r25	; 0x12
    1456:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1458:	8b 89       	ldd	r24, Y+19	; 0x13
    145a:	9c 89       	ldd	r25, Y+20	; 0x14
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	9c 8b       	std	Y+20, r25	; 0x14
    1460:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	8b 89       	ldd	r24, Y+19	; 0x13
    1464:	9c 89       	ldd	r25, Y+20	; 0x14
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	69 f7       	brne	.-38     	; 0x1444 <LCD_enuInit+0x2da>
    146a:	14 c0       	rjmp	.+40     	; 0x1494 <LCD_enuInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146c:	6d 89       	ldd	r22, Y+21	; 0x15
    146e:	7e 89       	ldd	r23, Y+22	; 0x16
    1470:	8f 89       	ldd	r24, Y+23	; 0x17
    1472:	98 8d       	ldd	r25, Y+24	; 0x18
    1474:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9c 8b       	std	Y+20, r25	; 0x14
    147e:	8b 8b       	std	Y+19, r24	; 0x13
    1480:	8b 89       	ldd	r24, Y+19	; 0x13
    1482:	9c 89       	ldd	r25, Y+20	; 0x14
    1484:	98 8b       	std	Y+16, r25	; 0x10
    1486:	8f 87       	std	Y+15, r24	; 0x0f
    1488:	8f 85       	ldd	r24, Y+15	; 0x0f
    148a:	98 89       	ldd	r25, Y+16	; 0x10
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_enuInit+0x322>
    1490:	98 8b       	std	Y+16, r25	; 0x10
    1492:	8f 87       	std	Y+15, r24	; 0x0f

	//clear display
	_delay_ms(1);
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	WriteNLatch(0x01);
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 e0       	ldi	r26, 0x00	; 0
    14aa:	b0 e4       	ldi	r27, 0x40	; 64
    14ac:	8b 87       	std	Y+11, r24	; 0x0b
    14ae:	9c 87       	std	Y+12, r25	; 0x0c
    14b0:	ad 87       	std	Y+13, r26	; 0x0d
    14b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a e7       	ldi	r20, 0x7A	; 122
    14c2:	55 e4       	ldi	r21, 0x45	; 69
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8f 83       	std	Y+7, r24	; 0x07
    14ce:	98 87       	std	Y+8, r25	; 0x08
    14d0:	a9 87       	std	Y+9, r26	; 0x09
    14d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <LCD_enuInit+0x38c>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <LCD_enuInit+0x40a>
	else if (__tmp > 65535)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <LCD_enuInit+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <LCD_enuInit+0x3ec>
    1538:	80 e9       	ldi	r24, 0x90	; 144
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	9c 83       	std	Y+4, r25	; 0x04
    153e:	8b 83       	std	Y+3, r24	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <LCD_enuInit+0x3da>
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <LCD_enuInit+0x3ce>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <LCD_enuInit+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6f 81       	ldd	r22, Y+7	; 0x07
    1562:	78 85       	ldd	r23, Y+8	; 0x08
    1564:	89 85       	ldd	r24, Y+9	; 0x09
    1566:	9a 85       	ldd	r25, Y+10	; 0x0a
    1568:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	9a 83       	std	Y+2, r25	; 0x02
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_enuInit+0x416>
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01

	//entry mode
	_delay_ms(2);
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	WriteNLatch(0x06);
    1592:	86 e0       	ldi	r24, 0x06	; 6
    1594:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>

	return Local_enuErrorState;
    1598:	89 ad       	ldd	r24, Y+57	; 0x39
}
    159a:	e9 96       	adiw	r28, 0x39	; 57
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <LCD_enuSendString>:

ES_t LCD_enuSendString(const char * Copy_ccString)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <LCD_enuSendString+0x6>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9b 83       	std	Y+3, r25	; 0x03
    15ba:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_ccString != NULL)
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	b1 f0       	breq	.+44     	; 0x15f4 <LCD_enuSendString+0x48>
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <LCD_enuSendString+0x3c>
	{
		while (*Copy_ccString != '\0')
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
			WriteNLatch(*Copy_ccString);
    15d4:	ea 81       	ldd	r30, Y+2	; 0x02
    15d6:	fb 81       	ldd	r31, Y+3	; 0x03
    15d8:	80 81       	ld	r24, Z
    15da:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>

			Copy_ccString++;
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	9b 81       	ldd	r25, Y+3	; 0x03
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	9b 83       	std	Y+3, r25	; 0x03
    15e6:	8a 83       	std	Y+2, r24	; 0x02
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_ccString != NULL)
	{
		while (*Copy_ccString != '\0')
    15e8:	ea 81       	ldd	r30, Y+2	; 0x02
    15ea:	fb 81       	ldd	r31, Y+3	; 0x03
    15ec:	80 81       	ld	r24, Z
    15ee:	88 23       	and	r24, r24
    15f0:	61 f7       	brne	.-40     	; 0x15ca <LCD_enuSendString+0x1e>
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <LCD_enuSendString+0x4c>
			Copy_ccString++;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <LCD_enuSendCommand>:


ES_t LCD_enuSendCommand(u8 Copy_u8Byte)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <LCD_enuSendCommand+0x6>
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Byte);
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>

	return Local_enuErrorState;
    1626:	89 81       	ldd	r24, Y+1	; 0x01
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <LCD_enuSendData>:

ES_t LCD_enuSendData(u8 Copy_u8Byte)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <LCD_enuSendData+0x6>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Byte);
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>

	return Local_enuErrorState;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <WriteNLatch>:


static ES_t WriteNLatch (u8 Copy_u8Byte)
{
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	c7 56       	subi	r28, 0x67	; 103
    166c:	d0 40       	sbci	r29, 0x00	; 0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	fe 01       	movw	r30, r28
    167a:	ee 59       	subi	r30, 0x9E	; 158
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 83       	st	Z, r24
	ES_t Local_enuErrorState = ES_NOK;
    1680:	fe 01       	movw	r30, r28
    1682:	eb 5a       	subi	r30, 0xAB	; 171
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	80 83       	st	Z, r24

	ES_t arr[12]={ES_NOK,ES_NOK,ES_NOK,ES_NOK,ES_NOK,ES_NOK
			,ES_NOK,ES_NOK,ES_NOK,ES_NOK,ES_NOK,ES_NOK};
    168a:	ce 01       	movw	r24, r28
    168c:	8a 5a       	subi	r24, 0xAA	; 170
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	a5 96       	adiw	r28, 0x25	; 37
    1692:	9f af       	std	Y+63, r25	; 0x3f
    1694:	8e af       	std	Y+62, r24	; 0x3e
    1696:	a5 97       	sbiw	r28, 0x25	; 37
    1698:	87 e7       	ldi	r24, 0x77	; 119
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a7 96       	adiw	r28, 0x27	; 39
    169e:	9f af       	std	Y+63, r25	; 0x3f
    16a0:	8e af       	std	Y+62, r24	; 0x3e
    16a2:	a7 97       	sbiw	r28, 0x27	; 39
    16a4:	9c e0       	ldi	r25, 0x0C	; 12
    16a6:	a8 96       	adiw	r28, 0x28	; 40
    16a8:	9f af       	std	Y+63, r25	; 0x3f
    16aa:	a8 97       	sbiw	r28, 0x28	; 40
    16ac:	a7 96       	adiw	r28, 0x27	; 39
    16ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    16b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    16b2:	a7 97       	sbiw	r28, 0x27	; 39
    16b4:	00 80       	ld	r0, Z
    16b6:	a7 96       	adiw	r28, 0x27	; 39
    16b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    16bc:	a7 97       	sbiw	r28, 0x27	; 39
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	a7 96       	adiw	r28, 0x27	; 39
    16c2:	9f af       	std	Y+63, r25	; 0x3f
    16c4:	8e af       	std	Y+62, r24	; 0x3e
    16c6:	a7 97       	sbiw	r28, 0x27	; 39
    16c8:	a5 96       	adiw	r28, 0x25	; 37
    16ca:	ee ad       	ldd	r30, Y+62	; 0x3e
    16cc:	ff ad       	ldd	r31, Y+63	; 0x3f
    16ce:	a5 97       	sbiw	r28, 0x25	; 37
    16d0:	00 82       	st	Z, r0
    16d2:	a5 96       	adiw	r28, 0x25	; 37
    16d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    16d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    16d8:	a5 97       	sbiw	r28, 0x25	; 37
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	a5 96       	adiw	r28, 0x25	; 37
    16de:	9f af       	std	Y+63, r25	; 0x3f
    16e0:	8e af       	std	Y+62, r24	; 0x3e
    16e2:	a5 97       	sbiw	r28, 0x25	; 37
    16e4:	a8 96       	adiw	r28, 0x28	; 40
    16e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    16e8:	a8 97       	sbiw	r28, 0x28	; 40
    16ea:	91 50       	subi	r25, 0x01	; 1
    16ec:	a8 96       	adiw	r28, 0x28	; 40
    16ee:	9f af       	std	Y+63, r25	; 0x3f
    16f0:	a8 97       	sbiw	r28, 0x28	; 40
    16f2:	a8 96       	adiw	r28, 0x28	; 40
    16f4:	ef ad       	ldd	r30, Y+63	; 0x3f
    16f6:	a8 97       	sbiw	r28, 0x28	; 40
    16f8:	ee 23       	and	r30, r30
    16fa:	c1 f6       	brne	.-80     	; 0x16ac <WriteNLatch+0x4e>

	arr[0]=DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	62 e0       	ldi	r22, 0x02	; 2
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
    1706:	fe 01       	movw	r30, r28
    1708:	ea 5a       	subi	r30, 0xAA	; 170
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	80 83       	st	Z, r24
	arr[1]=DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	62 e0       	ldi	r22, 0x02	; 2
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
    1718:	fe 01       	movw	r30, r28
    171a:	ea 5a       	subi	r30, 0xAA	; 170
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	81 83       	std	Z+1, r24	; 0x01

	Local_enuErrorState = ES_OK;

#elif LCD_MODE == FOUR_BIT

	if (Copy_u8Byte == 0x28)
    1720:	fe 01       	movw	r30, r28
    1722:	ee 59       	subi	r30, 0x9E	; 158
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	88 32       	cpi	r24, 0x28	; 40
    172a:	09 f0       	breq	.+2      	; 0x172e <WriteNLatch+0xd0>
    172c:	79 c1       	rjmp	.+754    	; 0x1a20 <WriteNLatch+0x3c2>
	{
		DIO_enuSetPinValue(D7_PORT , D7_PIN,   ((Copy_u8Byte>>7)&1)  );
    172e:	fe 01       	movw	r30, r28
    1730:	ee 59       	subi	r30, 0x9E	; 158
    1732:	ff 4f       	sbci	r31, 0xFF	; 255
    1734:	80 81       	ld	r24, Z
    1736:	98 2f       	mov	r25, r24
    1738:	99 1f       	adc	r25, r25
    173a:	99 27       	eor	r25, r25
    173c:	99 1f       	adc	r25, r25
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	66 e0       	ldi	r22, 0x06	; 6
    1742:	49 2f       	mov	r20, r25
    1744:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN,   ((Copy_u8Byte>>6)&1)  );
    1748:	fe 01       	movw	r30, r28
    174a:	ee 59       	subi	r30, 0x9E	; 158
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	82 95       	swap	r24
    1752:	86 95       	lsr	r24
    1754:	86 95       	lsr	r24
    1756:	83 70       	andi	r24, 0x03	; 3
    1758:	98 2f       	mov	r25, r24
    175a:	91 70       	andi	r25, 0x01	; 1
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	65 e0       	ldi	r22, 0x05	; 5
    1760:	49 2f       	mov	r20, r25
    1762:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN,   ((Copy_u8Byte>>5)&1)  );
    1766:	fe 01       	movw	r30, r28
    1768:	ee 59       	subi	r30, 0x9E	; 158
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 81       	ld	r24, Z
    176e:	82 95       	swap	r24
    1770:	86 95       	lsr	r24
    1772:	87 70       	andi	r24, 0x07	; 7
    1774:	98 2f       	mov	r25, r24
    1776:	91 70       	andi	r25, 0x01	; 1
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	64 e0       	ldi	r22, 0x04	; 4
    177c:	49 2f       	mov	r20, r25
    177e:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN,   ((Copy_u8Byte>>4)&1)  );
    1782:	fe 01       	movw	r30, r28
    1784:	ee 59       	subi	r30, 0x9E	; 158
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	82 95       	swap	r24
    178c:	8f 70       	andi	r24, 0x0F	; 15
    178e:	98 2f       	mov	r25, r24
    1790:	91 70       	andi	r25, 0x01	; 1
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	63 e0       	ldi	r22, 0x03	; 3
    1796:	49 2f       	mov	r20, r25
    1798:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>

		DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8HIGH);
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	62 e0       	ldi	r22, 0x02	; 2
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
    17a6:	fe 01       	movw	r30, r28
    17a8:	ef 5a       	subi	r30, 0xAF	; 175
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a0 ea       	ldi	r26, 0xA0	; 160
    17b2:	b0 e4       	ldi	r27, 0x40	; 64
    17b4:	80 83       	st	Z, r24
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	a2 83       	std	Z+2, r26	; 0x02
    17ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17bc:	8e 01       	movw	r16, r28
    17be:	03 5b       	subi	r16, 0xB3	; 179
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	fe 01       	movw	r30, r28
    17c4:	ef 5a       	subi	r30, 0xAF	; 175
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a e7       	ldi	r20, 0x7A	; 122
    17d6:	55 e4       	ldi	r21, 0x45	; 69
    17d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	f8 01       	movw	r30, r16
    17e2:	80 83       	st	Z, r24
    17e4:	91 83       	std	Z+1, r25	; 0x01
    17e6:	a2 83       	std	Z+2, r26	; 0x02
    17e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17ea:	fe 01       	movw	r30, r28
    17ec:	e3 5b       	subi	r30, 0xB3	; 179
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	5f e3       	ldi	r21, 0x3F	; 63
    1800:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1804:	88 23       	and	r24, r24
    1806:	44 f4       	brge	.+16     	; 0x1818 <WriteNLatch+0x1ba>
		__ticks = 1;
    1808:	fe 01       	movw	r30, r28
    180a:	e5 5b       	subi	r30, 0xB5	; 181
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
    1816:	64 c0       	rjmp	.+200    	; 0x18e0 <WriteNLatch+0x282>
	else if (__tmp > 65535)
    1818:	fe 01       	movw	r30, r28
    181a:	e3 5b       	subi	r30, 0xB3	; 179
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	82 81       	ldd	r24, Z+2	; 0x02
    1824:	93 81       	ldd	r25, Z+3	; 0x03
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	0c f0       	brlt	.+2      	; 0x1838 <WriteNLatch+0x1da>
    1836:	43 c0       	rjmp	.+134    	; 0x18be <WriteNLatch+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	fe 01       	movw	r30, r28
    183a:	ef 5a       	subi	r30, 0xAF	; 175
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	82 81       	ldd	r24, Z+2	; 0x02
    1844:	93 81       	ldd	r25, Z+3	; 0x03
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	8e 01       	movw	r16, r28
    1858:	05 5b       	subi	r16, 0xB5	; 181
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	f8 01       	movw	r30, r16
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24
    186e:	1f c0       	rjmp	.+62     	; 0x18ae <WriteNLatch+0x250>
    1870:	fe 01       	movw	r30, r28
    1872:	e7 5b       	subi	r30, 0xB7	; 183
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 e9       	ldi	r24, 0x90	; 144
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	80 83       	st	Z, r24
    187e:	fe 01       	movw	r30, r28
    1880:	e7 5b       	subi	r30, 0xB7	; 183
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <WriteNLatch+0x22a>
    188c:	fe 01       	movw	r30, r28
    188e:	e7 5b       	subi	r30, 0xB7	; 183
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1896:	de 01       	movw	r26, r28
    1898:	a5 5b       	subi	r26, 0xB5	; 181
    189a:	bf 4f       	sbci	r27, 0xFF	; 255
    189c:	fe 01       	movw	r30, r28
    189e:	e5 5b       	subi	r30, 0xB5	; 181
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	11 96       	adiw	r26, 0x01	; 1
    18aa:	9c 93       	st	X, r25
    18ac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ae:	fe 01       	movw	r30, r28
    18b0:	e5 5b       	subi	r30, 0xB5	; 181
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	d1 f6       	brne	.-76     	; 0x1870 <WriteNLatch+0x212>
    18bc:	27 c0       	rjmp	.+78     	; 0x190c <WriteNLatch+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	8e 01       	movw	r16, r28
    18c0:	05 5b       	subi	r16, 0xB5	; 181
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	fe 01       	movw	r30, r28
    18c6:	e3 5b       	subi	r30, 0xB3	; 179
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	60 81       	ld	r22, Z
    18cc:	71 81       	ldd	r23, Z+1	; 0x01
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	f8 01       	movw	r30, r16
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	de 01       	movw	r26, r28
    18e2:	a9 5b       	subi	r26, 0xB9	; 185
    18e4:	bf 4f       	sbci	r27, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	e5 5b       	subi	r30, 0xB5	; 181
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	8d 93       	st	X+, r24
    18f2:	9c 93       	st	X, r25
    18f4:	fe 01       	movw	r30, r28
    18f6:	e9 5b       	subi	r30, 0xB9	; 185
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	80 81       	ld	r24, Z
    18fc:	91 81       	ldd	r25, Z+1	; 0x01
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	f1 f7       	brne	.-4      	; 0x18fe <WriteNLatch+0x2a0>
    1902:	fe 01       	movw	r30, r28
    1904:	e9 5b       	subi	r30, 0xB9	; 185
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
		_delay_ms(5);
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	62 e0       	ldi	r22, 0x02	; 2
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
    1916:	fe 01       	movw	r30, r28
    1918:	ed 5b       	subi	r30, 0xBD	; 189
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a0 ea       	ldi	r26, 0xA0	; 160
    1922:	b0 e4       	ldi	r27, 0x40	; 64
    1924:	80 83       	st	Z, r24
    1926:	91 83       	std	Z+1, r25	; 0x01
    1928:	a2 83       	std	Z+2, r26	; 0x02
    192a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192c:	8e 01       	movw	r16, r28
    192e:	01 5c       	subi	r16, 0xC1	; 193
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	fe 01       	movw	r30, r28
    1934:	ed 5b       	subi	r30, 0xBD	; 189
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	4a e7       	ldi	r20, 0x7A	; 122
    1946:	55 e4       	ldi	r21, 0x45	; 69
    1948:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	f8 01       	movw	r30, r16
    1952:	80 83       	st	Z, r24
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	a2 83       	std	Z+2, r26	; 0x02
    1958:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    195a:	fe 01       	movw	r30, r28
    195c:	ff 96       	adiw	r30, 0x3f	; 63
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1972:	88 23       	and	r24, r24
    1974:	2c f4       	brge	.+10     	; 0x1980 <WriteNLatch+0x322>
		__ticks = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9e af       	std	Y+62, r25	; 0x3e
    197c:	8d af       	std	Y+61, r24	; 0x3d
    197e:	46 c0       	rjmp	.+140    	; 0x1a0c <WriteNLatch+0x3ae>
	else if (__tmp > 65535)
    1980:	fe 01       	movw	r30, r28
    1982:	ff 96       	adiw	r30, 0x3f	; 63
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	64 f5       	brge	.+88     	; 0x19f4 <WriteNLatch+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	fe 01       	movw	r30, r28
    199e:	ed 5b       	subi	r30, 0xBD	; 189
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9e af       	std	Y+62, r25	; 0x3e
    19c8:	8d af       	std	Y+61, r24	; 0x3d
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <WriteNLatch+0x38c>
    19cc:	80 e9       	ldi	r24, 0x90	; 144
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	9c af       	std	Y+60, r25	; 0x3c
    19d2:	8b af       	std	Y+59, r24	; 0x3b
    19d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    19d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <WriteNLatch+0x37a>
    19dc:	9c af       	std	Y+60, r25	; 0x3c
    19de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    19e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	9e af       	std	Y+62, r25	; 0x3e
    19e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	69 f7       	brne	.-38     	; 0x19cc <WriteNLatch+0x36e>
    19f2:	16 c0       	rjmp	.+44     	; 0x1a20 <WriteNLatch+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	fe 01       	movw	r30, r28
    19f6:	ff 96       	adiw	r30, 0x3f	; 63
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9e af       	std	Y+62, r25	; 0x3e
    1a0a:	8d af       	std	Y+61, r24	; 0x3d
    1a0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a10:	9a af       	std	Y+58, r25	; 0x3a
    1a12:	89 af       	std	Y+57, r24	; 0x39
    1a14:	89 ad       	ldd	r24, Y+57	; 0x39
    1a16:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <WriteNLatch+0x3ba>
    1a1c:	9a af       	std	Y+58, r25	; 0x3a
    1a1e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(5);
	}

	DIO_enuSetPinValue(D7_PORT , D7_PIN,   ((Copy_u8Byte>>7)&1)  );
    1a20:	fe 01       	movw	r30, r28
    1a22:	ee 59       	subi	r30, 0x9E	; 158
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	98 2f       	mov	r25, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	99 27       	eor	r25, r25
    1a2e:	99 1f       	adc	r25, r25
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	66 e0       	ldi	r22, 0x06	; 6
    1a34:	49 2f       	mov	r20, r25
    1a36:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN,   ((Copy_u8Byte>>6)&1)  );
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ee 59       	subi	r30, 0x9E	; 158
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	82 95       	swap	r24
    1a44:	86 95       	lsr	r24
    1a46:	86 95       	lsr	r24
    1a48:	83 70       	andi	r24, 0x03	; 3
    1a4a:	98 2f       	mov	r25, r24
    1a4c:	91 70       	andi	r25, 0x01	; 1
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	65 e0       	ldi	r22, 0x05	; 5
    1a52:	49 2f       	mov	r20, r25
    1a54:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN,   ((Copy_u8Byte>>5)&1)  );
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ee 59       	subi	r30, 0x9E	; 158
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	82 95       	swap	r24
    1a62:	86 95       	lsr	r24
    1a64:	87 70       	andi	r24, 0x07	; 7
    1a66:	98 2f       	mov	r25, r24
    1a68:	91 70       	andi	r25, 0x01	; 1
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	64 e0       	ldi	r22, 0x04	; 4
    1a6e:	49 2f       	mov	r20, r25
    1a70:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN,   ((Copy_u8Byte>>4)&1)  );
    1a74:	fe 01       	movw	r30, r28
    1a76:	ee 59       	subi	r30, 0x9E	; 158
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	82 95       	swap	r24
    1a7e:	8f 70       	andi	r24, 0x0F	; 15
    1a80:	98 2f       	mov	r25, r24
    1a82:	91 70       	andi	r25, 0x01	; 1
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	63 e0       	ldi	r22, 0x03	; 3
    1a88:	49 2f       	mov	r20, r25
    1a8a:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8HIGH);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	62 e0       	ldi	r22, 0x02	; 2
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a9e:	b0 e4       	ldi	r27, 0x40	; 64
    1aa0:	8d ab       	std	Y+53, r24	; 0x35
    1aa2:	9e ab       	std	Y+54, r25	; 0x36
    1aa4:	af ab       	std	Y+55, r26	; 0x37
    1aa6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    1aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    1aac:	8f a9       	ldd	r24, Y+55	; 0x37
    1aae:	98 ad       	ldd	r25, Y+56	; 0x38
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a e7       	ldi	r20, 0x7A	; 122
    1ab6:	55 e4       	ldi	r21, 0x45	; 69
    1ab8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	89 ab       	std	Y+49, r24	; 0x31
    1ac2:	9a ab       	std	Y+50, r25	; 0x32
    1ac4:	ab ab       	std	Y+51, r26	; 0x33
    1ac6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aca:	7a a9       	ldd	r23, Y+50	; 0x32
    1acc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ace:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <WriteNLatch+0x48c>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	98 ab       	std	Y+48, r25	; 0x30
    1ae6:	8f a7       	std	Y+47, r24	; 0x2f
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <WriteNLatch+0x50a>
	else if (__tmp > 65535)
    1aea:	69 a9       	ldd	r22, Y+49	; 0x31
    1aec:	7a a9       	ldd	r23, Y+50	; 0x32
    1aee:	8b a9       	ldd	r24, Y+51	; 0x33
    1af0:	9c a9       	ldd	r25, Y+52	; 0x34
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <WriteNLatch+0x4f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6d a9       	ldd	r22, Y+53	; 0x35
    1b04:	7e a9       	ldd	r23, Y+54	; 0x36
    1b06:	8f a9       	ldd	r24, Y+55	; 0x37
    1b08:	98 ad       	ldd	r25, Y+56	; 0x38
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	98 ab       	std	Y+48, r25	; 0x30
    1b28:	8f a7       	std	Y+47, r24	; 0x2f
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <WriteNLatch+0x4ec>
    1b2c:	80 e9       	ldi	r24, 0x90	; 144
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	9e a7       	std	Y+46, r25	; 0x2e
    1b32:	8d a7       	std	Y+45, r24	; 0x2d
    1b34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <WriteNLatch+0x4da>
    1b3c:	9e a7       	std	Y+46, r25	; 0x2e
    1b3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b42:	98 a9       	ldd	r25, Y+48	; 0x30
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	98 ab       	std	Y+48, r25	; 0x30
    1b48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <WriteNLatch+0x4ce>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <WriteNLatch+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	69 a9       	ldd	r22, Y+49	; 0x31
    1b56:	7a a9       	ldd	r23, Y+50	; 0x32
    1b58:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	98 ab       	std	Y+48, r25	; 0x30
    1b66:	8f a7       	std	Y+47, r24	; 0x2f
    1b68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6c:	9c a7       	std	Y+44, r25	; 0x2c
    1b6e:	8b a7       	std	Y+43, r24	; 0x2b
    1b70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <WriteNLatch+0x516>
    1b78:	9c a7       	std	Y+44, r25	; 0x2c
    1b7a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	62 e0       	ldi	r22, 0x02	; 2
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 ea       	ldi	r26, 0xA0	; 160
    1b8c:	b0 e4       	ldi	r27, 0x40	; 64
    1b8e:	8f a3       	std	Y+39, r24	; 0x27
    1b90:	98 a7       	std	Y+40, r25	; 0x28
    1b92:	a9 a7       	std	Y+41, r26	; 0x29
    1b94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	6f a1       	ldd	r22, Y+39	; 0x27
    1b98:	78 a5       	ldd	r23, Y+40	; 0x28
    1b9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a e7       	ldi	r20, 0x7A	; 122
    1ba4:	55 e4       	ldi	r21, 0x45	; 69
    1ba6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8b a3       	std	Y+35, r24	; 0x23
    1bb0:	9c a3       	std	Y+36, r25	; 0x24
    1bb2:	ad a3       	std	Y+37, r26	; 0x25
    1bb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bba:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <WriteNLatch+0x57a>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9a a3       	std	Y+34, r25	; 0x22
    1bd4:	89 a3       	std	Y+33, r24	; 0x21
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <WriteNLatch+0x5f8>
	else if (__tmp > 65535)
    1bd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bda:	7c a1       	ldd	r23, Y+36	; 0x24
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <WriteNLatch+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf2:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf4:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9a a3       	std	Y+34, r25	; 0x22
    1c16:	89 a3       	std	Y+33, r24	; 0x21
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <WriteNLatch+0x5da>
    1c1a:	80 e9       	ldi	r24, 0x90	; 144
    1c1c:	91 e0       	ldi	r25, 0x01	; 1
    1c1e:	98 a3       	std	Y+32, r25	; 0x20
    1c20:	8f 8f       	std	Y+31, r24	; 0x1f
    1c22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c24:	98 a1       	ldd	r25, Y+32	; 0x20
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <WriteNLatch+0x5c8>
    1c2a:	98 a3       	std	Y+32, r25	; 0x20
    1c2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c30:	9a a1       	ldd	r25, Y+34	; 0x22
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9a a3       	std	Y+34, r25	; 0x22
    1c36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <WriteNLatch+0x5bc>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <WriteNLatch+0x60c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6b a1       	ldd	r22, Y+35	; 0x23
    1c44:	7c a1       	ldd	r23, Y+36	; 0x24
    1c46:	8d a1       	ldd	r24, Y+37	; 0x25
    1c48:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9a a3       	std	Y+34, r25	; 0x22
    1c54:	89 a3       	std	Y+33, r24	; 0x21
    1c56:	89 a1       	ldd	r24, Y+33	; 0x21
    1c58:	9a a1       	ldd	r25, Y+34	; 0x22
    1c5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1c5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <WriteNLatch+0x604>
    1c66:	9e 8f       	std	Y+30, r25	; 0x1e
    1c68:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_enuSetPinValue(D7_PORT , D7_PIN,   ((Copy_u8Byte>>3)&1)  );
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ee 59       	subi	r30, 0x9E	; 158
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 81       	ld	r24, Z
    1c72:	86 95       	lsr	r24
    1c74:	86 95       	lsr	r24
    1c76:	86 95       	lsr	r24
    1c78:	98 2f       	mov	r25, r24
    1c7a:	91 70       	andi	r25, 0x01	; 1
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	66 e0       	ldi	r22, 0x06	; 6
    1c80:	49 2f       	mov	r20, r25
    1c82:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN,   ((Copy_u8Byte>>2)&1)  );
    1c86:	fe 01       	movw	r30, r28
    1c88:	ee 59       	subi	r30, 0x9E	; 158
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	86 95       	lsr	r24
    1c90:	86 95       	lsr	r24
    1c92:	98 2f       	mov	r25, r24
    1c94:	91 70       	andi	r25, 0x01	; 1
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	65 e0       	ldi	r22, 0x05	; 5
    1c9a:	49 2f       	mov	r20, r25
    1c9c:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN,   ((Copy_u8Byte>>1)&1)  );
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ee 59       	subi	r30, 0x9E	; 158
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	86 95       	lsr	r24
    1caa:	98 2f       	mov	r25, r24
    1cac:	91 70       	andi	r25, 0x01	; 1
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	64 e0       	ldi	r22, 0x04	; 4
    1cb2:	49 2f       	mov	r20, r25
    1cb4:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN,   ((Copy_u8Byte>>0)&1)  );
    1cb8:	fe 01       	movw	r30, r28
    1cba:	ee 59       	subi	r30, 0x9E	; 158
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	80 81       	ld	r24, Z
    1cc0:	98 2f       	mov	r25, r24
    1cc2:	91 70       	andi	r25, 0x01	; 1
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	63 e0       	ldi	r22, 0x03	; 3
    1cc8:	49 2f       	mov	r20, r25
    1cca:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_PORT,EN_PIN, DIO_u8HIGH);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 ea       	ldi	r26, 0xA0	; 160
    1cde:	b0 e4       	ldi	r27, 0x40	; 64
    1ce0:	89 8f       	std	Y+25, r24	; 0x19
    1ce2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a e7       	ldi	r20, 0x7A	; 122
    1cf6:	55 e4       	ldi	r21, 0x45	; 69
    1cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8d 8b       	std	Y+21, r24	; 0x15
    1d02:	9e 8b       	std	Y+22, r25	; 0x16
    1d04:	af 8b       	std	Y+23, r26	; 0x17
    1d06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d08:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <WriteNLatch+0x6cc>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 8b       	std	Y+20, r25	; 0x14
    1d26:	8b 8b       	std	Y+19, r24	; 0x13
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <WriteNLatch+0x74a>
	else if (__tmp > 65535)
    1d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d30:	98 8d       	ldd	r25, Y+24	; 0x18
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <WriteNLatch+0x736>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	69 8d       	ldd	r22, Y+25	; 0x19
    1d44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9c 8b       	std	Y+20, r25	; 0x14
    1d68:	8b 8b       	std	Y+19, r24	; 0x13
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <WriteNLatch+0x72c>
    1d6c:	80 e9       	ldi	r24, 0x90	; 144
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	9a 8b       	std	Y+18, r25	; 0x12
    1d72:	89 8b       	std	Y+17, r24	; 0x11
    1d74:	89 89       	ldd	r24, Y+17	; 0x11
    1d76:	9a 89       	ldd	r25, Y+18	; 0x12
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <WriteNLatch+0x71a>
    1d7c:	9a 8b       	std	Y+18, r25	; 0x12
    1d7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8b 89       	ldd	r24, Y+19	; 0x13
    1d82:	9c 89       	ldd	r25, Y+20	; 0x14
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <WriteNLatch+0x70e>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <WriteNLatch+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9c 8b       	std	Y+20, r25	; 0x14
    1da6:	8b 8b       	std	Y+19, r24	; 0x13
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	98 8b       	std	Y+16, r25	; 0x10
    1dae:	8f 87       	std	Y+15, r24	; 0x0f
    1db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db2:	98 89       	ldd	r25, Y+16	; 0x10
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <WriteNLatch+0x756>
    1db8:	98 8b       	std	Y+16, r25	; 0x10
    1dba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	62 e0       	ldi	r22, 0x02	; 2
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 ea       	ldi	r26, 0xA0	; 160
    1dcc:	b0 e4       	ldi	r27, 0x40	; 64
    1dce:	8b 87       	std	Y+11, r24	; 0x0b
    1dd0:	9c 87       	std	Y+12, r25	; 0x0c
    1dd2:	ad 87       	std	Y+13, r26	; 0x0d
    1dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	4a e7       	ldi	r20, 0x7A	; 122
    1de4:	55 e4       	ldi	r21, 0x45	; 69
    1de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	8f 83       	std	Y+7, r24	; 0x07
    1df0:	98 87       	std	Y+8, r25	; 0x08
    1df2:	a9 87       	std	Y+9, r26	; 0x09
    1df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e8       	ldi	r20, 0x80	; 128
    1e04:	5f e3       	ldi	r21, 0x3F	; 63
    1e06:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e0a:	88 23       	and	r24, r24
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <WriteNLatch+0x7ba>
		__ticks = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e 83       	std	Y+6, r25	; 0x06
    1e14:	8d 83       	std	Y+5, r24	; 0x05
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <WriteNLatch+0x838>
	else if (__tmp > 65535)
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	3f ef       	ldi	r19, 0xFF	; 255
    1e24:	4f e7       	ldi	r20, 0x7F	; 127
    1e26:	57 e4       	ldi	r21, 0x47	; 71
    1e28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	4c f5       	brge	.+82     	; 0x1e82 <WriteNLatch+0x824>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e2       	ldi	r20, 0x20	; 32
    1e3e:	51 e4       	ldi	r21, 0x41	; 65
    1e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9e 83       	std	Y+6, r25	; 0x06
    1e56:	8d 83       	std	Y+5, r24	; 0x05
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <WriteNLatch+0x81a>
    1e5a:	80 e9       	ldi	r24, 0x90	; 144
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	8b 83       	std	Y+3, r24	; 0x03
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <WriteNLatch+0x808>
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f7       	brne	.-38     	; 0x1e5a <WriteNLatch+0x7fc>
    1e80:	14 c0       	rjmp	.+40     	; 0x1eaa <WriteNLatch+0x84c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e82:	6f 81       	ldd	r22, Y+7	; 0x07
    1e84:	78 85       	ldd	r23, Y+8	; 0x08
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	9e 83       	std	Y+6, r25	; 0x06
    1e94:	8d 83       	std	Y+5, r24	; 0x05
    1e96:	8d 81       	ldd	r24, Y+5	; 0x05
    1e98:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9a:	9a 83       	std	Y+2, r25	; 0x02
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <WriteNLatch+0x844>
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif

	return Local_enuErrorState;
    1eaa:	fe 01       	movw	r30, r28
    1eac:	eb 5a       	subi	r30, 0xAB	; 171
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
	//dead code
}
    1eb2:	c9 59       	subi	r28, 0x99	; 153
    1eb4:	df 4f       	sbci	r29, 0xFF	; 255
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	08 95       	ret

00001eca <LCD_enuSendIntegerNum>:

ES_t LCD_enuSendIntegerNum(s32 Copy_s32Num)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	68 87       	std	Y+8, r22	; 0x08
    1ee0:	79 87       	std	Y+9, r23	; 0x09
    1ee2:	8a 87       	std	Y+10, r24	; 0x0a
    1ee4:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	8f 83       	std	Y+7, r24	; 0x07

	s32 Local_s32Reverse=0;
    1eea:	1b 82       	std	Y+3, r1	; 0x03
    1eec:	1c 82       	std	Y+4, r1	; 0x04
    1eee:	1d 82       	std	Y+5, r1	; 0x05
    1ef0:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    1ef2:	1a 82       	std	Y+2, r1	; 0x02
    1ef4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num <0)
    1ef6:	88 85       	ldd	r24, Y+8	; 0x08
    1ef8:	99 85       	ldd	r25, Y+9	; 0x09
    1efa:	aa 85       	ldd	r26, Y+10	; 0x0a
    1efc:	bb 85       	ldd	r27, Y+11	; 0x0b
    1efe:	bb 23       	and	r27, r27
    1f00:	0c f0       	brlt	.+2      	; 0x1f04 <LCD_enuSendIntegerNum+0x3a>
    1f02:	57 c0       	rjmp	.+174    	; 0x1fb2 <LCD_enuSendIntegerNum+0xe8>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	61 e0       	ldi	r22, 0x01	; 1
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
		WriteNLatch('-');
    1f0e:	8d e2       	ldi	r24, 0x2D	; 45
    1f10:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>
		Copy_s32Num *= -1 ;
    1f14:	88 85       	ldd	r24, Y+8	; 0x08
    1f16:	99 85       	ldd	r25, Y+9	; 0x09
    1f18:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f1a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f1c:	b0 95       	com	r27
    1f1e:	a0 95       	com	r26
    1f20:	90 95       	com	r25
    1f22:	81 95       	neg	r24
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	af 4f       	sbci	r26, 0xFF	; 255
    1f28:	bf 4f       	sbci	r27, 0xFF	; 255
    1f2a:	88 87       	std	Y+8, r24	; 0x08
    1f2c:	99 87       	std	Y+9, r25	; 0x09
    1f2e:	aa 87       	std	Y+10, r26	; 0x0a
    1f30:	bb 87       	std	Y+11, r27	; 0x0b
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <LCD_enuSendIntegerNum+0xe8>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    1f34:	88 85       	ldd	r24, Y+8	; 0x08
    1f36:	99 85       	ldd	r25, Y+9	; 0x09
    1f38:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f3a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f3c:	2a e0       	ldi	r18, 0x0A	; 10
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	bc 01       	movw	r22, r24
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__divmodsi4>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	ad 81       	ldd	r26, Y+5	; 0x05
    1f58:	be 81       	ldd	r27, Y+6	; 0x06
    1f5a:	2a e0       	ldi	r18, 0x0A	; 10
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 c4 14 	call	0x2988	; 0x2988 <__mulsi3>
    1f6a:	9b 01       	movw	r18, r22
    1f6c:	ac 01       	movw	r20, r24
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e0       	ldi	r26, 0x00	; 0
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	82 0f       	add	r24, r18
    1f7a:	93 1f       	adc	r25, r19
    1f7c:	a4 1f       	adc	r26, r20
    1f7e:	b5 1f       	adc	r27, r21
    1f80:	8b 83       	std	Y+3, r24	; 0x03
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	ad 83       	std	Y+5, r26	; 0x05
    1f86:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    1f88:	88 85       	ldd	r24, Y+8	; 0x08
    1f8a:	99 85       	ldd	r25, Y+9	; 0x09
    1f8c:	aa 85       	ldd	r26, Y+10	; 0x0a
    1f8e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1f90:	2a e0       	ldi	r18, 0x0A	; 10
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__divmodsi4>
    1fa0:	da 01       	movw	r26, r20
    1fa2:	c9 01       	movw	r24, r18
    1fa4:	88 87       	std	Y+8, r24	; 0x08
    1fa6:	99 87       	std	Y+9, r25	; 0x09
    1fa8:	aa 87       	std	Y+10, r26	; 0x0a
    1faa:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	8f 5f       	subi	r24, 0xFF	; 255
    1fb0:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		WriteNLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    1fb2:	88 85       	ldd	r24, Y+8	; 0x08
    1fb4:	99 85       	ldd	r25, Y+9	; 0x09
    1fb6:	aa 85       	ldd	r26, Y+10	; 0x0a
    1fb8:	bb 85       	ldd	r27, Y+11	; 0x0b
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	a1 05       	cpc	r26, r1
    1fbe:	b1 05       	cpc	r27, r1
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <LCD_enuSendIntegerNum+0xfa>
    1fc2:	b8 cf       	rjmp	.-144    	; 0x1f34 <LCD_enuSendIntegerNum+0x6a>
    1fc4:	2d c0       	rjmp	.+90     	; 0x2020 <LCD_enuSendIntegerNum+0x156>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	ad 81       	ldd	r26, Y+5	; 0x05
    1fcc:	be 81       	ldd	r27, Y+6	; 0x06
    1fce:	2a e0       	ldi	r18, 0x0A	; 10
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__divmodsi4>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
		WriteNLatch(Local_u8Remainder + '0');
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	80 5d       	subi	r24, 0xD0	; 208
    1ff2:	0e 94 2f 0b 	call	0x165e	; 0x165e <WriteNLatch>
		Local_s32Reverse /= 10;
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffa:	ad 81       	ldd	r26, Y+5	; 0x05
    1ffc:	be 81       	ldd	r27, Y+6	; 0x06
    1ffe:	2a e0       	ldi	r18, 0x0A	; 10
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__divmodsi4>
    200e:	da 01       	movw	r26, r20
    2010:	c9 01       	movw	r24, r18
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	9c 83       	std	Y+4, r25	; 0x04
    2016:	ad 83       	std	Y+5, r26	; 0x05
    2018:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	81 50       	subi	r24, 0x01	; 1
    201e:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	88 23       	and	r24, r24
    2024:	81 f6       	brne	.-96     	; 0x1fc6 <LCD_enuSendIntegerNum+0xfc>
		WriteNLatch(Local_u8Remainder + '0');
		Local_s32Reverse /= 10;
		Local_u8NumDigit --;
	}

	return Local_enuErrorState;
    2026:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2028:	2b 96       	adiw	r28, 0x0b	; 11
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <LCD_voidSendPosition>:
void LCD_voidSendPosition(u8 Copy_LineNUM,u8 Copy_u8Col)
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <LCD_voidSendPosition+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <LCD_voidSendPosition+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8Col<=39)
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	88 32       	cpi	r24, 0x28	; 40
    204e:	c0 f4       	brcc	.+48     	; 0x2080 <LCD_voidSendPosition+0x46>
	{
		switch (Copy_LineNUM)
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	3c 83       	std	Y+4, r19	; 0x04
    2058:	2b 83       	std	Y+3, r18	; 0x03
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	31 f0       	breq	.+12     	; 0x206e <LCD_voidSendPosition+0x34>
    2062:	2b 81       	ldd	r18, Y+3	; 0x03
    2064:	3c 81       	ldd	r19, Y+4	; 0x04
    2066:	21 30       	cpi	r18, 0x01	; 1
    2068:	31 05       	cpc	r19, r1
    206a:	31 f0       	breq	.+12     	; 0x2078 <LCD_voidSendPosition+0x3e>
    206c:	09 c0       	rjmp	.+18     	; 0x2080 <LCD_voidSendPosition+0x46>
		{
		case  LCD_LINE1: LCD_enuSendCommand(0x80 +Copy_u8Col);
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	80 58       	subi	r24, 0x80	; 128
    2072:	0e 94 03 0b 	call	0x1606	; 0x1606 <LCD_enuSendCommand>
    2076:	04 c0       	rjmp	.+8      	; 0x2080 <LCD_voidSendPosition+0x46>
		break ;
		case LCD_LINE2: LCD_enuSendCommand(0xc0 +Copy_u8Col);
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	80 54       	subi	r24, 0x40	; 64
    207c:	0e 94 03 0b 	call	0x1606	; 0x1606 <LCD_enuSendCommand>
	}
	else
	{
		/*Error*/
	}
}
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <Keypad_enuInit>:
#include "Keypad_priv.h"

#include <util/delay.h>

ES_t Keypad_enuInit(void)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinDirection(C1_GROUP,C1_PIN,DIO_u8OUTPUT);
    209c:	83 e0       	ldi	r24, 0x03	; 3
    209e:	62 e0       	ldi	r22, 0x02	; 2
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_GROUP,C2_PIN,DIO_u8OUTPUT);
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	63 e0       	ldi	r22, 0x03	; 3
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_GROUP,C3_PIN,DIO_u8OUTPUT);
    20b0:	83 e0       	ldi	r24, 0x03	; 3
    20b2:	64 e0       	ldi	r22, 0x04	; 4
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_GROUP,C4_PIN,DIO_u8OUTPUT);
    20ba:	83 e0       	ldi	r24, 0x03	; 3
    20bc:	65 e0       	ldi	r22, 0x05	; 5
    20be:	41 e0       	ldi	r20, 0x01	; 1
    20c0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_GROUP,R1_PIN,DIO_u8INPUT);
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	64 e0       	ldi	r22, 0x04	; 4
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_GROUP,R2_PIN,DIO_u8INPUT);
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	65 e0       	ldi	r22, 0x05	; 5
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_GROUP,R3_PIN,DIO_u8INPUT);
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	66 e0       	ldi	r22, 0x06	; 6
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_GROUP,R4_PIN,DIO_u8INPUT);
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	67 e0       	ldi	r22, 0x07	; 7
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	0e 94 ae 05 	call	0xb5c	; 0xb5c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_GROUP,C1_PIN,DIO_u8HIGH);
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	62 e0       	ldi	r22, 0x02	; 2
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_GROUP,C2_PIN,DIO_u8HIGH);
    20f6:	83 e0       	ldi	r24, 0x03	; 3
    20f8:	63 e0       	ldi	r22, 0x03	; 3
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_GROUP,C3_PIN,DIO_u8HIGH);
    2100:	83 e0       	ldi	r24, 0x03	; 3
    2102:	64 e0       	ldi	r22, 0x04	; 4
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_GROUP,C4_PIN,DIO_u8HIGH);
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	65 e0       	ldi	r22, 0x05	; 5
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_GROUP,R1_PIN,DIO_u8PULL_UP);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	64 e0       	ldi	r22, 0x04	; 4
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_GROUP,R2_PIN,DIO_u8PULL_UP);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	65 e0       	ldi	r22, 0x05	; 5
    2122:	41 e0       	ldi	r20, 0x01	; 1
    2124:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_GROUP,R3_PIN,DIO_u8PULL_UP);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	66 e0       	ldi	r22, 0x06	; 6
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_GROUP,R4_PIN,DIO_u8PULL_UP);
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	67 e0       	ldi	r22, 0x07	; 7
    2136:	41 e0       	ldi	r20, 0x01	; 1
    2138:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>

	return Local_enuErrorState;
    213c:	89 81       	ldd	r24, Y+1	; 0x01
}
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <Keypad_enuGetPressed>:

ES_t Keypad_enuGetPressed(u8 * Copy_pu8PressedKey)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	ea 97       	sbiw	r28, 0x3a	; 58
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	9d ab       	std	Y+53, r25	; 0x35
    215c:	8c ab       	std	Y+52, r24	; 0x34
	ES_t Local_enuErrorState = ES_NOK;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	8a 8b       	std	Y+18, r24	; 0x12

	u8 Local_Au8RowGrp[]={R1_GROUP,R2_GROUP,R3_GROUP,R4_GROUP};
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	8b 8b       	std	Y+19, r24	; 0x13
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	8c 8b       	std	Y+20, r24	; 0x14
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	8d 8b       	std	Y+21, r24	; 0x15
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Local_Au8ColGrp[]={C1_GROUP,C2_GROUP,C3_GROUP,C4_GROUP};
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	8f 8b       	std	Y+23, r24	; 0x17
    2176:	83 e0       	ldi	r24, 0x03	; 3
    2178:	88 8f       	std	Y+24, r24	; 0x18
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	89 8f       	std	Y+25, r24	; 0x19
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	8a 8f       	std	Y+26, r24	; 0x1a

	u8 Local_Au8RowPin[]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    2182:	84 e0       	ldi	r24, 0x04	; 4
    2184:	8b 8f       	std	Y+27, r24	; 0x1b
    2186:	85 e0       	ldi	r24, 0x05	; 5
    2188:	8c 8f       	std	Y+28, r24	; 0x1c
    218a:	86 e0       	ldi	r24, 0x06	; 6
    218c:	8d 8f       	std	Y+29, r24	; 0x1d
    218e:	87 e0       	ldi	r24, 0x07	; 7
    2190:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Local_Au8ColPin[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	8f 8f       	std	Y+31, r24	; 0x1f
    2196:	83 e0       	ldi	r24, 0x03	; 3
    2198:	88 a3       	std	Y+32, r24	; 0x20
    219a:	84 e0       	ldi	r24, 0x04	; 4
    219c:	89 a3       	std	Y+33, r24	; 0x21
    219e:	85 e0       	ldi	r24, 0x05	; 5
    21a0:	8a a3       	std	Y+34, r24	; 0x22

	u8 Local_u8RowIter = 0 , Local_u8ColIter = 0;
    21a2:	19 8a       	std	Y+17, r1	; 0x11
    21a4:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8PinValue=0xff , Local_u8KeyValue =0xff;
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	8b a3       	std	Y+35, r24	; 0x23
    21aa:	8f ef       	ldi	r24, 0xFF	; 255
    21ac:	8f 87       	std	Y+15, r24	; 0x0f

	for(Local_u8ColIter = 0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++)
    21ae:	18 8a       	std	Y+16, r1	; 0x10
    21b0:	3b c1       	rjmp	.+630    	; 0x2428 <Keypad_enuGetPressed+0x2e2>
	{
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter], Local_Au8ColPin[Local_u8ColIter], DIO_u8LOW);
    21b2:	88 89       	ldd	r24, Y+16	; 0x10
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	ce 01       	movw	r24, r28
    21ba:	47 96       	adiw	r24, 0x17	; 23
    21bc:	fc 01       	movw	r30, r24
    21be:	e2 0f       	add	r30, r18
    21c0:	f3 1f       	adc	r31, r19
    21c2:	40 81       	ld	r20, Z
    21c4:	88 89       	ldd	r24, Y+16	; 0x10
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	ce 01       	movw	r24, r28
    21cc:	4f 96       	adiw	r24, 0x1f	; 31
    21ce:	fc 01       	movw	r30, r24
    21d0:	e2 0f       	add	r30, r18
    21d2:	f3 1f       	adc	r31, r19
    21d4:	90 81       	ld	r25, Z
    21d6:	84 2f       	mov	r24, r20
    21d8:	69 2f       	mov	r22, r25
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
		for(Local_u8RowIter = 0 ; Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    21e0:	19 8a       	std	Y+17, r1	; 0x11
    21e2:	04 c1       	rjmp	.+520    	; 0x23ec <Keypad_enuGetPressed+0x2a6>
		{
			DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
    21e4:	89 89       	ldd	r24, Y+17	; 0x11
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	ce 01       	movw	r24, r28
    21ec:	43 96       	adiw	r24, 0x13	; 19
    21ee:	fc 01       	movw	r30, r24
    21f0:	e2 0f       	add	r30, r18
    21f2:	f3 1f       	adc	r31, r19
    21f4:	40 81       	ld	r20, Z
    21f6:	89 89       	ldd	r24, Y+17	; 0x11
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	ce 01       	movw	r24, r28
    21fe:	4b 96       	adiw	r24, 0x1b	; 27
    2200:	fc 01       	movw	r30, r24
    2202:	e2 0f       	add	r30, r18
    2204:	f3 1f       	adc	r31, r19
    2206:	90 81       	ld	r25, Z
    2208:	9e 01       	movw	r18, r28
    220a:	2d 5d       	subi	r18, 0xDD	; 221
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	84 2f       	mov	r24, r20
    2210:	69 2f       	mov	r22, r25
    2212:	a9 01       	movw	r20, r18
    2214:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    2218:	8b a1       	ldd	r24, Y+35	; 0x23
    221a:	88 23       	and	r24, r24
    221c:	09 f0       	breq	.+2      	; 0x2220 <Keypad_enuGetPressed+0xda>
    221e:	e3 c0       	rjmp	.+454    	; 0x23e6 <Keypad_enuGetPressed+0x2a0>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a0 e2       	ldi	r26, 0x20	; 32
    2226:	b1 e4       	ldi	r27, 0x41	; 65
    2228:	8b 87       	std	Y+11, r24	; 0x0b
    222a:	9c 87       	std	Y+12, r25	; 0x0c
    222c:	ad 87       	std	Y+13, r26	; 0x0d
    222e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	6b 85       	ldd	r22, Y+11	; 0x0b
    2232:	7c 85       	ldd	r23, Y+12	; 0x0c
    2234:	8d 85       	ldd	r24, Y+13	; 0x0d
    2236:	9e 85       	ldd	r25, Y+14	; 0x0e
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a e7       	ldi	r20, 0x7A	; 122
    223e:	55 e4       	ldi	r21, 0x45	; 69
    2240:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8f 83       	std	Y+7, r24	; 0x07
    224a:	98 87       	std	Y+8, r25	; 0x08
    224c:	a9 87       	std	Y+9, r26	; 0x09
    224e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	2c f4       	brge	.+10     	; 0x2272 <Keypad_enuGetPressed+0x12c>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <Keypad_enuGetPressed+0x1aa>
	else if (__tmp > 65535)
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	4c f5       	brge	.+82     	; 0x22dc <Keypad_enuGetPressed+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	6b 85       	ldd	r22, Y+11	; 0x0b
    228c:	7c 85       	ldd	r23, Y+12	; 0x0c
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	9e 85       	ldd	r25, Y+14	; 0x0e
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <Keypad_enuGetPressed+0x18c>
    22b4:	80 e9       	ldi	r24, 0x90	; 144
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <Keypad_enuGetPressed+0x17a>
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <Keypad_enuGetPressed+0x16e>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <Keypad_enuGetPressed+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	9a 81       	ldd	r25, Y+2	; 0x02
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <Keypad_enuGetPressed+0x1b6>
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
    2304:	89 89       	ldd	r24, Y+17	; 0x11
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	ce 01       	movw	r24, r28
    230c:	43 96       	adiw	r24, 0x13	; 19
    230e:	fc 01       	movw	r30, r24
    2310:	e2 0f       	add	r30, r18
    2312:	f3 1f       	adc	r31, r19
    2314:	40 81       	ld	r20, Z
    2316:	89 89       	ldd	r24, Y+17	; 0x11
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	ce 01       	movw	r24, r28
    231e:	4b 96       	adiw	r24, 0x1b	; 27
    2320:	fc 01       	movw	r30, r24
    2322:	e2 0f       	add	r30, r18
    2324:	f3 1f       	adc	r31, r19
    2326:	90 81       	ld	r25, Z
    2328:	9e 01       	movw	r18, r28
    232a:	2d 5d       	subi	r18, 0xDD	; 221
    232c:	3f 4f       	sbci	r19, 0xFF	; 255
    232e:	84 2f       	mov	r24, r20
    2330:	69 2f       	mov	r22, r25
    2332:	a9 01       	movw	r20, r18
    2334:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_enuGetPinValue>
				if(! Local_u8PinValue)
    2338:	8b a1       	ldd	r24, Y+35	; 0x23
    233a:	88 23       	and	r24, r24
    233c:	09 f0       	breq	.+2      	; 0x2340 <Keypad_enuGetPressed+0x1fa>
    233e:	53 c0       	rjmp	.+166    	; 0x23e6 <Keypad_enuGetPressed+0x2a0>
    2340:	1a c0       	rjmp	.+52     	; 0x2376 <Keypad_enuGetPressed+0x230>
				{
					while(! Local_u8PinValue)
					{
						DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
    2342:	89 89       	ldd	r24, Y+17	; 0x11
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	ce 01       	movw	r24, r28
    234a:	43 96       	adiw	r24, 0x13	; 19
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	40 81       	ld	r20, Z
    2354:	89 89       	ldd	r24, Y+17	; 0x11
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	ce 01       	movw	r24, r28
    235c:	4b 96       	adiw	r24, 0x1b	; 27
    235e:	fc 01       	movw	r30, r24
    2360:	e2 0f       	add	r30, r18
    2362:	f3 1f       	adc	r31, r19
    2364:	90 81       	ld	r25, Z
    2366:	9e 01       	movw	r18, r28
    2368:	2d 5d       	subi	r18, 0xDD	; 221
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	84 2f       	mov	r24, r20
    236e:	69 2f       	mov	r22, r25
    2370:	a9 01       	movw	r20, r18
    2372:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
				if(! Local_u8PinValue)
				{
					while(! Local_u8PinValue)
    2376:	8b a1       	ldd	r24, Y+35	; 0x23
    2378:	88 23       	and	r24, r24
    237a:	19 f3       	breq	.-58     	; 0x2342 <Keypad_enuGetPressed+0x1fc>
					{
						DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter], Local_Au8RowPin[Local_u8RowIter], & Local_u8PinValue);
					}
					u8 Local_Au8KeysValues[ROW_NUM][COL_NUM] = KEYS_VALUES;
    237c:	ce 01       	movw	r24, r28
    237e:	84 96       	adiw	r24, 0x24	; 36
    2380:	9f ab       	std	Y+55, r25	; 0x37
    2382:	8e ab       	std	Y+54, r24	; 0x36
    2384:	e3 e8       	ldi	r30, 0x83	; 131
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	f9 af       	std	Y+57, r31	; 0x39
    238a:	e8 af       	std	Y+56, r30	; 0x38
    238c:	f0 e1       	ldi	r31, 0x10	; 16
    238e:	fa af       	std	Y+58, r31	; 0x3a
    2390:	e8 ad       	ldd	r30, Y+56	; 0x38
    2392:	f9 ad       	ldd	r31, Y+57	; 0x39
    2394:	00 80       	ld	r0, Z
    2396:	88 ad       	ldd	r24, Y+56	; 0x38
    2398:	99 ad       	ldd	r25, Y+57	; 0x39
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	99 af       	std	Y+57, r25	; 0x39
    239e:	88 af       	std	Y+56, r24	; 0x38
    23a0:	ee a9       	ldd	r30, Y+54	; 0x36
    23a2:	ff a9       	ldd	r31, Y+55	; 0x37
    23a4:	00 82       	st	Z, r0
    23a6:	8e a9       	ldd	r24, Y+54	; 0x36
    23a8:	9f a9       	ldd	r25, Y+55	; 0x37
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	9f ab       	std	Y+55, r25	; 0x37
    23ae:	8e ab       	std	Y+54, r24	; 0x36
    23b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    23b2:	91 50       	subi	r25, 0x01	; 1
    23b4:	9a af       	std	Y+58, r25	; 0x3a
    23b6:	ea ad       	ldd	r30, Y+58	; 0x3a
    23b8:	ee 23       	and	r30, r30
    23ba:	51 f7       	brne	.-44     	; 0x2390 <Keypad_enuGetPressed+0x24a>
					Local_u8KeyValue =  Local_Au8KeysValues[Local_u8RowIter][Local_u8ColIter];
    23bc:	89 89       	ldd	r24, Y+17	; 0x11
    23be:	28 2f       	mov	r18, r24
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	88 89       	ldd	r24, Y+16	; 0x10
    23c4:	48 2f       	mov	r20, r24
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	ce 01       	movw	r24, r28
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	84 0f       	add	r24, r20
    23da:	95 1f       	adc	r25, r21
    23dc:	fc 01       	movw	r30, r24
    23de:	b3 96       	adiw	r30, 0x23	; 35
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 87       	std	Y+15, r24	; 0x0f

					Local_enuErrorState = ES_OK;
    23e4:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Local_u8PinValue=0xff , Local_u8KeyValue =0xff;

	for(Local_u8ColIter = 0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++)
	{
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter], Local_Au8ColPin[Local_u8ColIter], DIO_u8LOW);
		for(Local_u8RowIter = 0 ; Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    23e6:	89 89       	ldd	r24, Y+17	; 0x11
    23e8:	8f 5f       	subi	r24, 0xFF	; 255
    23ea:	89 8b       	std	Y+17, r24	; 0x11
    23ec:	89 89       	ldd	r24, Y+17	; 0x11
    23ee:	84 30       	cpi	r24, 0x04	; 4
    23f0:	08 f4       	brcc	.+2      	; 0x23f4 <Keypad_enuGetPressed+0x2ae>
    23f2:	f8 ce       	rjmp	.-528    	; 0x21e4 <Keypad_enuGetPressed+0x9e>

					Local_enuErrorState = ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter], Local_Au8ColPin[Local_u8ColIter], DIO_u8HIGH);
    23f4:	88 89       	ldd	r24, Y+16	; 0x10
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	ce 01       	movw	r24, r28
    23fc:	47 96       	adiw	r24, 0x17	; 23
    23fe:	fc 01       	movw	r30, r24
    2400:	e2 0f       	add	r30, r18
    2402:	f3 1f       	adc	r31, r19
    2404:	40 81       	ld	r20, Z
    2406:	88 89       	ldd	r24, Y+16	; 0x10
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	ce 01       	movw	r24, r28
    240e:	4f 96       	adiw	r24, 0x1f	; 31
    2410:	fc 01       	movw	r30, r24
    2412:	e2 0f       	add	r30, r18
    2414:	f3 1f       	adc	r31, r19
    2416:	90 81       	ld	r25, Z
    2418:	84 2f       	mov	r24, r20
    241a:	69 2f       	mov	r22, r25
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_enuSetPinValue>
	u8 Local_Au8ColPin[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};

	u8 Local_u8RowIter = 0 , Local_u8ColIter = 0;
	u8 Local_u8PinValue=0xff , Local_u8KeyValue =0xff;

	for(Local_u8ColIter = 0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++)
    2422:	88 89       	ldd	r24, Y+16	; 0x10
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	88 8b       	std	Y+16, r24	; 0x10
    2428:	88 89       	ldd	r24, Y+16	; 0x10
    242a:	84 30       	cpi	r24, 0x04	; 4
    242c:	08 f4       	brcc	.+2      	; 0x2430 <Keypad_enuGetPressed+0x2ea>
    242e:	c1 ce       	rjmp	.-638    	; 0x21b2 <Keypad_enuGetPressed+0x6c>
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter], Local_Au8ColPin[Local_u8ColIter], DIO_u8HIGH);
	}
	*Copy_pu8PressedKey= Local_u8KeyValue;
    2430:	ec a9       	ldd	r30, Y+52	; 0x34
    2432:	fd a9       	ldd	r31, Y+53	; 0x35
    2434:	8f 85       	ldd	r24, Y+15	; 0x0f
    2436:	80 83       	st	Z, r24

	return Local_enuErrorState;
    2438:	8a 89       	ldd	r24, Y+18	; 0x12
}
    243a:	ea 96       	adiw	r28, 0x3a	; 58
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <NUMBER>:
Boolean_T  multiply(s32 num_1,s32 num_2,s32 *value);
/***********************************************/

/**********************************************************/
s32 NUMBER(s32 *ptr)
{
    244c:	ef 92       	push	r14
    244e:	ff 92       	push	r15
    2450:	0f 93       	push	r16
    2452:	1f 93       	push	r17
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	00 d0       	rcall	.+0      	; 0x245a <NUMBER+0xe>
    245a:	00 d0       	rcall	.+0      	; 0x245c <NUMBER+0x10>
    245c:	00 d0       	rcall	.+0      	; 0x245e <NUMBER+0x12>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
	s32 y=0;
    2466:	19 82       	std	Y+1, r1	; 0x01
    2468:	1a 82       	std	Y+2, r1	; 0x02
    246a:	1b 82       	std	Y+3, r1	; 0x03
    246c:	1c 82       	std	Y+4, r1	; 0x04
	y=((ptr[0])*1000)+((ptr[1])*100)+((ptr[2])*10)+ptr[3];
    246e:	ed 81       	ldd	r30, Y+5	; 0x05
    2470:	fe 81       	ldd	r31, Y+6	; 0x06
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	a2 81       	ldd	r26, Z+2	; 0x02
    2478:	b3 81       	ldd	r27, Z+3	; 0x03
    247a:	28 ee       	ldi	r18, 0xE8	; 232
    247c:	33 e0       	ldi	r19, 0x03	; 3
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 c4 14 	call	0x2988	; 0x2988 <__mulsi3>
    248a:	7b 01       	movw	r14, r22
    248c:	8c 01       	movw	r16, r24
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	fc 01       	movw	r30, r24
    2494:	34 96       	adiw	r30, 0x04	; 4
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	a2 81       	ldd	r26, Z+2	; 0x02
    249c:	b3 81       	ldd	r27, Z+3	; 0x03
    249e:	24 e6       	ldi	r18, 0x64	; 100
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 c4 14 	call	0x2988	; 0x2988 <__mulsi3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	e8 0e       	add	r14, r24
    24b4:	f9 1e       	adc	r15, r25
    24b6:	0a 1f       	adc	r16, r26
    24b8:	1b 1f       	adc	r17, r27
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	fc 01       	movw	r30, r24
    24c0:	38 96       	adiw	r30, 0x08	; 8
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	a2 81       	ldd	r26, Z+2	; 0x02
    24c8:	b3 81       	ldd	r27, Z+3	; 0x03
    24ca:	2a e0       	ldi	r18, 0x0A	; 10
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 c4 14 	call	0x2988	; 0x2988 <__mulsi3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	a8 01       	movw	r20, r16
    24e0:	97 01       	movw	r18, r14
    24e2:	28 0f       	add	r18, r24
    24e4:	39 1f       	adc	r19, r25
    24e6:	4a 1f       	adc	r20, r26
    24e8:	5b 1f       	adc	r21, r27
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	fc 01       	movw	r30, r24
    24f0:	3c 96       	adiw	r30, 0x0c	; 12
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	a2 81       	ldd	r26, Z+2	; 0x02
    24f8:	b3 81       	ldd	r27, Z+3	; 0x03
    24fa:	82 0f       	add	r24, r18
    24fc:	93 1f       	adc	r25, r19
    24fe:	a4 1f       	adc	r26, r20
    2500:	b5 1f       	adc	r27, r21
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	9a 83       	std	Y+2, r25	; 0x02
    2506:	ab 83       	std	Y+3, r26	; 0x03
    2508:	bc 83       	std	Y+4, r27	; 0x04
	return y;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	ab 81       	ldd	r26, Y+3	; 0x03
    2510:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	26 96       	adiw	r28, 0x06	; 6
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	ff 90       	pop	r15
    252c:	ef 90       	pop	r14
    252e:	08 95       	ret

00002530 <main>:
/**********************************************************/
int main()
{
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	61 97       	sbiw	r28, 0x11	; 17
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
	/***********************************************/
	/****************Initalization******************/
	/***********************************************/
	LCD_enuInit();
    2548:	0e 94 b5 08 	call	0x116a	; 0x116a <LCD_enuInit>
	Keypad_enuInit();
    254c:	0e 94 47 10 	call	0x208e	; 0x208e <Keypad_enuInit>
	/***********************************************/
	s32 Local_s32Result=0	;
    2550:	1b 86       	std	Y+11, r1	; 0x0b
    2552:	1c 86       	std	Y+12, r1	; 0x0c
    2554:	1d 86       	std	Y+13, r1	; 0x0d
    2556:	1e 86       	std	Y+14, r1	; 0x0e
	Boolean_T STATE=FALSE;
    2558:	1a 86       	std	Y+10, r1	; 0x0a
	u8 Local_u8SW_Value = KEYPAD_NOT_PRESSED;
    255a:	8f ef       	ldi	r24, 0xFF	; 255
    255c:	8f 87       	std	Y+15, r24	; 0x0f
	u8 Local_u8Operator = 0;
    255e:	19 86       	std	Y+9, r1	; 0x09
	s32 NUM_1 = 0, NUM_2 = 0;
    2560:	1d 82       	std	Y+5, r1	; 0x05
    2562:	1e 82       	std	Y+6, r1	; 0x06
    2564:	1f 82       	std	Y+7, r1	; 0x07
    2566:	18 86       	std	Y+8, r1	; 0x08
    2568:	19 82       	std	Y+1, r1	; 0x01
    256a:	1a 82       	std	Y+2, r1	; 0x02
    256c:	1b 82       	std	Y+3, r1	; 0x03
    256e:	1c 82       	std	Y+4, r1	; 0x04

	while (1)
	{
		Keypad_enuGetPressed(&Local_u8SW_Value);
    2570:	ce 01       	movw	r24, r28
    2572:	0f 96       	adiw	r24, 0x0f	; 15
    2574:	0e 94 a3 10 	call	0x2146	; 0x2146 <Keypad_enuGetPressed>
		if (Local_u8SW_Value != KEYPAD_NOT_PRESSED)
    2578:	8f 85       	ldd	r24, Y+15	; 0x0f
    257a:	8f 3f       	cpi	r24, 0xFF	; 255
    257c:	c9 f3       	breq	.-14     	; 0x2570 <main+0x40>
		{
			if (Local_u8SW_Value <= 9)
    257e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2580:	8a 30       	cpi	r24, 0x0A	; 10
    2582:	08 f0       	brcs	.+2      	; 0x2586 <main+0x56>
    2584:	6e c0       	rjmp	.+220    	; 0x2662 <main+0x132>
			{
				/*GET NUMBER_1*/

				if (!Local_u8Operator)
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	88 23       	and	r24, r24
    258a:	a9 f5       	brne	.+106    	; 0x25f6 <main+0xc6>
				{
					LCD_enuSendIntegerNum(Local_u8SW_Value);
    258c:	8f 85       	ldd	r24, Y+15	; 0x0f
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a0 e0       	ldi	r26, 0x00	; 0
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <LCD_enuSendIntegerNum>
					NUM_1 *= 10;
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
    25a0:	9e 81       	ldd	r25, Y+6	; 0x06
    25a2:	af 81       	ldd	r26, Y+7	; 0x07
    25a4:	b8 85       	ldd	r27, Y+8	; 0x08
    25a6:	2a e0       	ldi	r18, 0x0A	; 10
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 c4 14 	call	0x2988	; 0x2988 <__mulsi3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	af 83       	std	Y+7, r26	; 0x07
    25c0:	b8 87       	std	Y+8, r27	; 0x08
					NUM_1 += Local_u8SW_Value;
    25c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	af 81       	ldd	r26, Y+7	; 0x07
    25d2:	b8 85       	ldd	r27, Y+8	; 0x08
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	a4 1f       	adc	r26, r20
    25da:	b5 1f       	adc	r27, r21
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	af 83       	std	Y+7, r26	; 0x07
    25e2:	b8 87       	std	Y+8, r27	; 0x08
					if (Local_u8SW_Value == NULL)
    25e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	09 f6       	brne	.-126    	; 0x2570 <main+0x40>
					{
						LCD_enuSendData('0');
    25ee:	80 e3       	ldi	r24, 0x30	; 48
    25f0:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_enuSendData>
    25f4:	bd cf       	rjmp	.-134    	; 0x2570 <main+0x40>
					}
				}
				/*GET NUMBER_2*/
				else
				{
					LCD_enuSendIntegerNum(Local_u8SW_Value);
    25f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f8:	88 2f       	mov	r24, r24
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 e0       	ldi	r26, 0x00	; 0
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 65 0f 	call	0x1eca	; 0x1eca <LCD_enuSendIntegerNum>
					NUM_2 *= 10;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	ab 81       	ldd	r26, Y+3	; 0x03
    260e:	bc 81       	ldd	r27, Y+4	; 0x04
    2610:	2a e0       	ldi	r18, 0x0A	; 10
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	bc 01       	movw	r22, r24
    261a:	cd 01       	movw	r24, r26
    261c:	0e 94 c4 14 	call	0x2988	; 0x2988 <__mulsi3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	9a 83       	std	Y+2, r25	; 0x02
    2628:	ab 83       	std	Y+3, r26	; 0x03
    262a:	bc 83       	std	Y+4, r27	; 0x04
					NUM_2 += Local_u8SW_Value;
    262c:	8f 85       	ldd	r24, Y+15	; 0x0f
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	50 e0       	ldi	r21, 0x00	; 0
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	ab 81       	ldd	r26, Y+3	; 0x03
    263c:	bc 81       	ldd	r27, Y+4	; 0x04
    263e:	82 0f       	add	r24, r18
    2640:	93 1f       	adc	r25, r19
    2642:	a4 1f       	adc	r26, r20
    2644:	b5 1f       	adc	r27, r21
    2646:	89 83       	std	Y+1, r24	; 0x01
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	ab 83       	std	Y+3, r26	; 0x03
    264c:	bc 83       	std	Y+4, r27	; 0x04
					if (Local_u8SW_Value == NULL)
    264e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2650:	88 2f       	mov	r24, r24
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	09 f0       	breq	.+2      	; 0x265a <main+0x12a>
    2658:	8b cf       	rjmp	.-234    	; 0x2570 <main+0x40>
					{
						LCD_enuSendData('0');
    265a:	80 e3       	ldi	r24, 0x30	; 48
    265c:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_enuSendData>
    2660:	87 cf       	rjmp	.-242    	; 0x2570 <main+0x40>
					}
				}
			}
			else
			{
				LCD_enuSendData(Local_u8SW_Value);
    2662:	8f 85       	ldd	r24, Y+15	; 0x0f
    2664:	0e 94 19 0b 	call	0x1632	; 0x1632 <LCD_enuSendData>
				if (Local_u8SW_Value == '=')
    2668:	8f 85       	ldd	r24, Y+15	; 0x0f
    266a:	8d 33       	cpi	r24, 0x3D	; 61
    266c:	09 f0       	breq	.+2      	; 0x2670 <main+0x140>
    266e:	8e c0       	rjmp	.+284    	; 0x278c <main+0x25c>
				{
					switch (Local_u8Operator)
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	39 8b       	std	Y+17, r19	; 0x11
    2678:	28 8b       	std	Y+16, r18	; 0x10
    267a:	88 89       	ldd	r24, Y+16	; 0x10
    267c:	99 89       	ldd	r25, Y+17	; 0x11
    267e:	8f 32       	cpi	r24, 0x2F	; 47
    2680:	91 05       	cpc	r25, r1
    2682:	09 f4       	brne	.+2      	; 0x2686 <main+0x156>
    2684:	5e c0       	rjmp	.+188    	; 0x2742 <main+0x212>
    2686:	28 89       	ldd	r18, Y+16	; 0x10
    2688:	39 89       	ldd	r19, Y+17	; 0x11
    268a:	20 33       	cpi	r18, 0x30	; 48
    268c:	31 05       	cpc	r19, r1
    268e:	5c f4       	brge	.+22     	; 0x26a6 <main+0x176>
    2690:	88 89       	ldd	r24, Y+16	; 0x10
    2692:	99 89       	ldd	r25, Y+17	; 0x11
    2694:	8b 32       	cpi	r24, 0x2B	; 43
    2696:	91 05       	cpc	r25, r1
    2698:	61 f0       	breq	.+24     	; 0x26b2 <main+0x182>
    269a:	28 89       	ldd	r18, Y+16	; 0x10
    269c:	39 89       	ldd	r19, Y+17	; 0x11
    269e:	2d 32       	cpi	r18, 0x2D	; 45
    26a0:	31 05       	cpc	r19, r1
    26a2:	f9 f0       	breq	.+62     	; 0x26e2 <main+0x1b2>
    26a4:	65 cf       	rjmp	.-310    	; 0x2570 <main+0x40>
    26a6:	88 89       	ldd	r24, Y+16	; 0x10
    26a8:	99 89       	ldd	r25, Y+17	; 0x11
    26aa:	88 37       	cpi	r24, 0x78	; 120
    26ac:	91 05       	cpc	r25, r1
    26ae:	89 f1       	breq	.+98     	; 0x2712 <main+0x1e2>
    26b0:	5f cf       	rjmp	.-322    	; 0x2570 <main+0x40>
					{
					case '+':

						ADD(NUM_1, NUM_2, &Local_s32Result);
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	9e 81       	ldd	r25, Y+6	; 0x06
    26b6:	af 81       	ldd	r26, Y+7	; 0x07
    26b8:	b8 85       	ldd	r27, Y+8	; 0x08
    26ba:	29 81       	ldd	r18, Y+1	; 0x01
    26bc:	3a 81       	ldd	r19, Y+2	; 0x02
    26be:	4b 81       	ldd	r20, Y+3	; 0x03
    26c0:	5c 81       	ldd	r21, Y+4	; 0x04
    26c2:	fe 01       	movw	r30, r28
    26c4:	3b 96       	adiw	r30, 0x0b	; 11
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	8f 01       	movw	r16, r30
    26cc:	0e 94 1e 14 	call	0x283c	; 0x283c <ADD>
						LCD_enuSendIntegerNum(Local_s32Result);
    26d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    26d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    26d4:	ad 85       	ldd	r26, Y+13	; 0x0d
    26d6:	be 85       	ldd	r27, Y+14	; 0x0e
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	0e 94 65 0f 	call	0x1eca	; 0x1eca <LCD_enuSendIntegerNum>
    26e0:	47 cf       	rjmp	.-370    	; 0x2570 <main+0x40>

						break;
					case '-':
						SUB(NUM_1, NUM_2, &Local_s32Result);
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	af 81       	ldd	r26, Y+7	; 0x07
    26e8:	b8 85       	ldd	r27, Y+8	; 0x08
    26ea:	29 81       	ldd	r18, Y+1	; 0x01
    26ec:	3a 81       	ldd	r19, Y+2	; 0x02
    26ee:	4b 81       	ldd	r20, Y+3	; 0x03
    26f0:	5c 81       	ldd	r21, Y+4	; 0x04
    26f2:	fe 01       	movw	r30, r28
    26f4:	3b 96       	adiw	r30, 0x0b	; 11
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	8f 01       	movw	r16, r30
    26fc:	0e 94 52 14 	call	0x28a4	; 0x28a4 <SUB>
						LCD_enuSendIntegerNum(Local_s32Result);
    2700:	8b 85       	ldd	r24, Y+11	; 0x0b
    2702:	9c 85       	ldd	r25, Y+12	; 0x0c
    2704:	ad 85       	ldd	r26, Y+13	; 0x0d
    2706:	be 85       	ldd	r27, Y+14	; 0x0e
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <LCD_enuSendIntegerNum>
    2710:	2f cf       	rjmp	.-418    	; 0x2570 <main+0x40>
						break;
					case 'x':
						multiply(NUM_1,NUM_2,&Local_s32Result);
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	af 81       	ldd	r26, Y+7	; 0x07
    2718:	b8 85       	ldd	r27, Y+8	; 0x08
    271a:	29 81       	ldd	r18, Y+1	; 0x01
    271c:	3a 81       	ldd	r19, Y+2	; 0x02
    271e:	4b 81       	ldd	r20, Y+3	; 0x03
    2720:	5c 81       	ldd	r21, Y+4	; 0x04
    2722:	fe 01       	movw	r30, r28
    2724:	3b 96       	adiw	r30, 0x0b	; 11
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	8f 01       	movw	r16, r30
    272c:	0e 94 8e 14 	call	0x291c	; 0x291c <multiply>
						LCD_enuSendIntegerNum(Local_s32Result);
    2730:	8b 85       	ldd	r24, Y+11	; 0x0b
    2732:	9c 85       	ldd	r25, Y+12	; 0x0c
    2734:	ad 85       	ldd	r26, Y+13	; 0x0d
    2736:	be 85       	ldd	r27, Y+14	; 0x0e
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <LCD_enuSendIntegerNum>
    2740:	17 cf       	rjmp	.-466    	; 0x2570 <main+0x40>
						break;
					case'/':
						LCD_voidSendPosition(LCD_LINE2, 0);
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_voidSendPosition>
						STATE=division(NUM_1,NUM_2,&Local_s32Result);
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	af 81       	ldd	r26, Y+7	; 0x07
    2750:	b8 85       	ldd	r27, Y+8	; 0x08
    2752:	29 81       	ldd	r18, Y+1	; 0x01
    2754:	3a 81       	ldd	r19, Y+2	; 0x02
    2756:	4b 81       	ldd	r20, Y+3	; 0x03
    2758:	5c 81       	ldd	r21, Y+4	; 0x04
    275a:	fe 01       	movw	r30, r28
    275c:	3b 96       	adiw	r30, 0x0b	; 11
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	8f 01       	movw	r16, r30
    2764:	0e 94 db 13 	call	0x27b6	; 0x27b6 <division>
    2768:	8a 87       	std	Y+10, r24	; 0x0a
						if (STATE!=FALSE)
    276a:	8a 85       	ldd	r24, Y+10	; 0x0a
    276c:	88 23       	and	r24, r24
    276e:	49 f0       	breq	.+18     	; 0x2782 <main+0x252>
						{
							LCD_enuSendIntegerNum(Local_s32Result);
    2770:	8b 85       	ldd	r24, Y+11	; 0x0b
    2772:	9c 85       	ldd	r25, Y+12	; 0x0c
    2774:	ad 85       	ldd	r26, Y+13	; 0x0d
    2776:	be 85       	ldd	r27, Y+14	; 0x0e
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <LCD_enuSendIntegerNum>
    2780:	f7 ce       	rjmp	.-530    	; 0x2570 <main+0x40>
						}
						else
						{
							LCD_enuSendString("Unknown Error:");
    2782:	80 e6       	ldi	r24, 0x60	; 96
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_enuSendString>
    278a:	f2 ce       	rjmp	.-540    	; 0x2570 <main+0x40>
						}
						break;
					}
				}
				else if (Local_u8SW_Value == 'C')
    278c:	8f 85       	ldd	r24, Y+15	; 0x0f
    278e:	83 34       	cpi	r24, 0x43	; 67
    2790:	79 f4       	brne	.+30     	; 0x27b0 <main+0x280>
				{
					LCD_enuSendCommand(0x01);
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	0e 94 03 0b 	call	0x1606	; 0x1606 <LCD_enuSendCommand>
					Local_u8SW_Value = KEYPAD_NOT_PRESSED, Local_u8Operator = 0;
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	8f 87       	std	Y+15, r24	; 0x0f
    279c:	19 86       	std	Y+9, r1	; 0x09
					NUM_1 = 0, NUM_2 = 0;
    279e:	1d 82       	std	Y+5, r1	; 0x05
    27a0:	1e 82       	std	Y+6, r1	; 0x06
    27a2:	1f 82       	std	Y+7, r1	; 0x07
    27a4:	18 86       	std	Y+8, r1	; 0x08
    27a6:	19 82       	std	Y+1, r1	; 0x01
    27a8:	1a 82       	std	Y+2, r1	; 0x02
    27aa:	1b 82       	std	Y+3, r1	; 0x03
    27ac:	1c 82       	std	Y+4, r1	; 0x04
    27ae:	e0 ce       	rjmp	.-576    	; 0x2570 <main+0x40>
				}
				else
				{
					Local_u8Operator = Local_u8SW_Value;
    27b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b2:	89 87       	std	Y+9, r24	; 0x09
    27b4:	dd ce       	rjmp	.-582    	; 0x2570 <main+0x40>

000027b6 <division>:
}

/**********************************************************/

Boolean_T  division(s32 num_1,s32 num_2,s32 *value)
{
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	2b 97       	sbiw	r28, 0x0b	; 11
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	6a 83       	std	Y+2, r22	; 0x02
    27d0:	7b 83       	std	Y+3, r23	; 0x03
    27d2:	8c 83       	std	Y+4, r24	; 0x04
    27d4:	9d 83       	std	Y+5, r25	; 0x05
    27d6:	2e 83       	std	Y+6, r18	; 0x06
    27d8:	3f 83       	std	Y+7, r19	; 0x07
    27da:	48 87       	std	Y+8, r20	; 0x08
    27dc:	59 87       	std	Y+9, r21	; 0x09
    27de:	1b 87       	std	Y+11, r17	; 0x0b
    27e0:	0a 87       	std	Y+10, r16	; 0x0a
	Boolean_T ErrorState=FALSE;
    27e2:	19 82       	std	Y+1, r1	; 0x01
	if (num_2!=0)
    27e4:	8e 81       	ldd	r24, Y+6	; 0x06
    27e6:	9f 81       	ldd	r25, Y+7	; 0x07
    27e8:	a8 85       	ldd	r26, Y+8	; 0x08
    27ea:	b9 85       	ldd	r27, Y+9	; 0x09
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	a1 05       	cpc	r26, r1
    27f0:	b1 05       	cpc	r27, r1
    27f2:	b9 f0       	breq	.+46     	; 0x2822 <division+0x6c>
	{
		*value=	num_1/num_2;
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	9b 81       	ldd	r25, Y+3	; 0x03
    27f8:	ac 81       	ldd	r26, Y+4	; 0x04
    27fa:	bd 81       	ldd	r27, Y+5	; 0x05
    27fc:	2e 81       	ldd	r18, Y+6	; 0x06
    27fe:	3f 81       	ldd	r19, Y+7	; 0x07
    2800:	48 85       	ldd	r20, Y+8	; 0x08
    2802:	59 85       	ldd	r21, Y+9	; 0x09
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__divmodsi4>
    280c:	da 01       	movw	r26, r20
    280e:	c9 01       	movw	r24, r18
    2810:	ea 85       	ldd	r30, Y+10	; 0x0a
    2812:	fb 85       	ldd	r31, Y+11	; 0x0b
    2814:	80 83       	st	Z, r24
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	a2 83       	std	Z+2, r26	; 0x02
    281a:	b3 83       	std	Z+3, r27	; 0x03
		ErrorState =TRUE;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <division+0x6e>
	}
	else
	{
		ErrorState=FALSE;
    2822:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    2824:	89 81       	ldd	r24, Y+1	; 0x01
}
    2826:	2b 96       	adiw	r28, 0x0b	; 11
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	08 95       	ret

0000283c <ADD>:
/***********************************************************/
Boolean_T  ADD(s32 num_1,s32 num_2,s32 *value)
{
    283c:	0f 93       	push	r16
    283e:	1f 93       	push	r17
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	2a 97       	sbiw	r28, 0x0a	; 10
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	69 83       	std	Y+1, r22	; 0x01
    2856:	7a 83       	std	Y+2, r23	; 0x02
    2858:	8b 83       	std	Y+3, r24	; 0x03
    285a:	9c 83       	std	Y+4, r25	; 0x04
    285c:	2d 83       	std	Y+5, r18	; 0x05
    285e:	3e 83       	std	Y+6, r19	; 0x06
    2860:	4f 83       	std	Y+7, r20	; 0x07
    2862:	58 87       	std	Y+8, r21	; 0x08
    2864:	1a 87       	std	Y+10, r17	; 0x0a
    2866:	09 87       	std	Y+9, r16	; 0x09
	*value=num_1+num_2;
    2868:	29 81       	ldd	r18, Y+1	; 0x01
    286a:	3a 81       	ldd	r19, Y+2	; 0x02
    286c:	4b 81       	ldd	r20, Y+3	; 0x03
    286e:	5c 81       	ldd	r21, Y+4	; 0x04
    2870:	8d 81       	ldd	r24, Y+5	; 0x05
    2872:	9e 81       	ldd	r25, Y+6	; 0x06
    2874:	af 81       	ldd	r26, Y+7	; 0x07
    2876:	b8 85       	ldd	r27, Y+8	; 0x08
    2878:	82 0f       	add	r24, r18
    287a:	93 1f       	adc	r25, r19
    287c:	a4 1f       	adc	r26, r20
    287e:	b5 1f       	adc	r27, r21
    2880:	e9 85       	ldd	r30, Y+9	; 0x09
    2882:	fa 85       	ldd	r31, Y+10	; 0x0a
    2884:	80 83       	st	Z, r24
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	a2 83       	std	Z+2, r26	; 0x02
    288a:	b3 83       	std	Z+3, r27	; 0x03
	return TRUE;
    288c:	81 e0       	ldi	r24, 0x01	; 1
}
    288e:	2a 96       	adiw	r28, 0x0a	; 10
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	08 95       	ret

000028a4 <SUB>:
/***********************************************************/
Boolean_T  SUB(s32 num_1,s32 num_2,s32 *value)
{
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	2a 97       	sbiw	r28, 0x0a	; 10
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	69 83       	std	Y+1, r22	; 0x01
    28c2:	7a 83       	std	Y+2, r23	; 0x02
    28c4:	8b 83       	std	Y+3, r24	; 0x03
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	2d 83       	std	Y+5, r18	; 0x05
    28ca:	3e 83       	std	Y+6, r19	; 0x06
    28cc:	4f 83       	std	Y+7, r20	; 0x07
    28ce:	58 87       	std	Y+8, r21	; 0x08
    28d0:	1a 87       	std	Y+10, r17	; 0x0a
    28d2:	09 87       	std	Y+9, r16	; 0x09
	*value=num_1-num_2;
    28d4:	29 81       	ldd	r18, Y+1	; 0x01
    28d6:	3a 81       	ldd	r19, Y+2	; 0x02
    28d8:	4b 81       	ldd	r20, Y+3	; 0x03
    28da:	5c 81       	ldd	r21, Y+4	; 0x04
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	af 81       	ldd	r26, Y+7	; 0x07
    28e2:	b8 85       	ldd	r27, Y+8	; 0x08
    28e4:	79 01       	movw	r14, r18
    28e6:	8a 01       	movw	r16, r20
    28e8:	e8 1a       	sub	r14, r24
    28ea:	f9 0a       	sbc	r15, r25
    28ec:	0a 0b       	sbc	r16, r26
    28ee:	1b 0b       	sbc	r17, r27
    28f0:	d8 01       	movw	r26, r16
    28f2:	c7 01       	movw	r24, r14
    28f4:	e9 85       	ldd	r30, Y+9	; 0x09
    28f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    28f8:	80 83       	st	Z, r24
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	a2 83       	std	Z+2, r26	; 0x02
    28fe:	b3 83       	std	Z+3, r27	; 0x03
	return TRUE;
    2900:	81 e0       	ldi	r24, 0x01	; 1
}
    2902:	2a 96       	adiw	r28, 0x0a	; 10
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	1f 91       	pop	r17
    2914:	0f 91       	pop	r16
    2916:	ff 90       	pop	r15
    2918:	ef 90       	pop	r14
    291a:	08 95       	ret

0000291c <multiply>:
/**********************************************************/
Boolean_T  multiply(s32 num_1,s32 num_2,s32 *value)
{
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	2a 97       	sbiw	r28, 0x0a	; 10
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	69 83       	std	Y+1, r22	; 0x01
    2936:	7a 83       	std	Y+2, r23	; 0x02
    2938:	8b 83       	std	Y+3, r24	; 0x03
    293a:	9c 83       	std	Y+4, r25	; 0x04
    293c:	2d 83       	std	Y+5, r18	; 0x05
    293e:	3e 83       	std	Y+6, r19	; 0x06
    2940:	4f 83       	std	Y+7, r20	; 0x07
    2942:	58 87       	std	Y+8, r21	; 0x08
    2944:	1a 87       	std	Y+10, r17	; 0x0a
    2946:	09 87       	std	Y+9, r16	; 0x09
	*value=num_1*num_2;
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	ab 81       	ldd	r26, Y+3	; 0x03
    294e:	bc 81       	ldd	r27, Y+4	; 0x04
    2950:	2d 81       	ldd	r18, Y+5	; 0x05
    2952:	3e 81       	ldd	r19, Y+6	; 0x06
    2954:	4f 81       	ldd	r20, Y+7	; 0x07
    2956:	58 85       	ldd	r21, Y+8	; 0x08
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	0e 94 c4 14 	call	0x2988	; 0x2988 <__mulsi3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	e9 85       	ldd	r30, Y+9	; 0x09
    2966:	fa 85       	ldd	r31, Y+10	; 0x0a
    2968:	80 83       	st	Z, r24
    296a:	91 83       	std	Z+1, r25	; 0x01
    296c:	a2 83       	std	Z+2, r26	; 0x02
    296e:	b3 83       	std	Z+3, r27	; 0x03
	return TRUE;
    2970:	81 e0       	ldi	r24, 0x01	; 1
}
    2972:	2a 96       	adiw	r28, 0x0a	; 10
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret

00002988 <__mulsi3>:
    2988:	62 9f       	mul	r22, r18
    298a:	d0 01       	movw	r26, r0
    298c:	73 9f       	mul	r23, r19
    298e:	f0 01       	movw	r30, r0
    2990:	82 9f       	mul	r24, r18
    2992:	e0 0d       	add	r30, r0
    2994:	f1 1d       	adc	r31, r1
    2996:	64 9f       	mul	r22, r20
    2998:	e0 0d       	add	r30, r0
    299a:	f1 1d       	adc	r31, r1
    299c:	92 9f       	mul	r25, r18
    299e:	f0 0d       	add	r31, r0
    29a0:	83 9f       	mul	r24, r19
    29a2:	f0 0d       	add	r31, r0
    29a4:	74 9f       	mul	r23, r20
    29a6:	f0 0d       	add	r31, r0
    29a8:	65 9f       	mul	r22, r21
    29aa:	f0 0d       	add	r31, r0
    29ac:	99 27       	eor	r25, r25
    29ae:	72 9f       	mul	r23, r18
    29b0:	b0 0d       	add	r27, r0
    29b2:	e1 1d       	adc	r30, r1
    29b4:	f9 1f       	adc	r31, r25
    29b6:	63 9f       	mul	r22, r19
    29b8:	b0 0d       	add	r27, r0
    29ba:	e1 1d       	adc	r30, r1
    29bc:	f9 1f       	adc	r31, r25
    29be:	bd 01       	movw	r22, r26
    29c0:	cf 01       	movw	r24, r30
    29c2:	11 24       	eor	r1, r1
    29c4:	08 95       	ret

000029c6 <__divmodsi4>:
    29c6:	97 fb       	bst	r25, 7
    29c8:	09 2e       	mov	r0, r25
    29ca:	05 26       	eor	r0, r21
    29cc:	0e d0       	rcall	.+28     	; 0x29ea <__divmodsi4_neg1>
    29ce:	57 fd       	sbrc	r21, 7
    29d0:	04 d0       	rcall	.+8      	; 0x29da <__divmodsi4_neg2>
    29d2:	14 d0       	rcall	.+40     	; 0x29fc <__udivmodsi4>
    29d4:	0a d0       	rcall	.+20     	; 0x29ea <__divmodsi4_neg1>
    29d6:	00 1c       	adc	r0, r0
    29d8:	38 f4       	brcc	.+14     	; 0x29e8 <__divmodsi4_exit>

000029da <__divmodsi4_neg2>:
    29da:	50 95       	com	r21
    29dc:	40 95       	com	r20
    29de:	30 95       	com	r19
    29e0:	21 95       	neg	r18
    29e2:	3f 4f       	sbci	r19, 0xFF	; 255
    29e4:	4f 4f       	sbci	r20, 0xFF	; 255
    29e6:	5f 4f       	sbci	r21, 0xFF	; 255

000029e8 <__divmodsi4_exit>:
    29e8:	08 95       	ret

000029ea <__divmodsi4_neg1>:
    29ea:	f6 f7       	brtc	.-4      	; 0x29e8 <__divmodsi4_exit>
    29ec:	90 95       	com	r25
    29ee:	80 95       	com	r24
    29f0:	70 95       	com	r23
    29f2:	61 95       	neg	r22
    29f4:	7f 4f       	sbci	r23, 0xFF	; 255
    29f6:	8f 4f       	sbci	r24, 0xFF	; 255
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	08 95       	ret

000029fc <__udivmodsi4>:
    29fc:	a1 e2       	ldi	r26, 0x21	; 33
    29fe:	1a 2e       	mov	r1, r26
    2a00:	aa 1b       	sub	r26, r26
    2a02:	bb 1b       	sub	r27, r27
    2a04:	fd 01       	movw	r30, r26
    2a06:	0d c0       	rjmp	.+26     	; 0x2a22 <__udivmodsi4_ep>

00002a08 <__udivmodsi4_loop>:
    2a08:	aa 1f       	adc	r26, r26
    2a0a:	bb 1f       	adc	r27, r27
    2a0c:	ee 1f       	adc	r30, r30
    2a0e:	ff 1f       	adc	r31, r31
    2a10:	a2 17       	cp	r26, r18
    2a12:	b3 07       	cpc	r27, r19
    2a14:	e4 07       	cpc	r30, r20
    2a16:	f5 07       	cpc	r31, r21
    2a18:	20 f0       	brcs	.+8      	; 0x2a22 <__udivmodsi4_ep>
    2a1a:	a2 1b       	sub	r26, r18
    2a1c:	b3 0b       	sbc	r27, r19
    2a1e:	e4 0b       	sbc	r30, r20
    2a20:	f5 0b       	sbc	r31, r21

00002a22 <__udivmodsi4_ep>:
    2a22:	66 1f       	adc	r22, r22
    2a24:	77 1f       	adc	r23, r23
    2a26:	88 1f       	adc	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	1a 94       	dec	r1
    2a2c:	69 f7       	brne	.-38     	; 0x2a08 <__udivmodsi4_loop>
    2a2e:	60 95       	com	r22
    2a30:	70 95       	com	r23
    2a32:	80 95       	com	r24
    2a34:	90 95       	com	r25
    2a36:	9b 01       	movw	r18, r22
    2a38:	ac 01       	movw	r20, r24
    2a3a:	bd 01       	movw	r22, r26
    2a3c:	cf 01       	movw	r24, r30
    2a3e:	08 95       	ret

00002a40 <__prologue_saves__>:
    2a40:	2f 92       	push	r2
    2a42:	3f 92       	push	r3
    2a44:	4f 92       	push	r4
    2a46:	5f 92       	push	r5
    2a48:	6f 92       	push	r6
    2a4a:	7f 92       	push	r7
    2a4c:	8f 92       	push	r8
    2a4e:	9f 92       	push	r9
    2a50:	af 92       	push	r10
    2a52:	bf 92       	push	r11
    2a54:	cf 92       	push	r12
    2a56:	df 92       	push	r13
    2a58:	ef 92       	push	r14
    2a5a:	ff 92       	push	r15
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	ca 1b       	sub	r28, r26
    2a6a:	db 0b       	sbc	r29, r27
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	09 94       	ijmp

00002a78 <__epilogue_restores__>:
    2a78:	2a 88       	ldd	r2, Y+18	; 0x12
    2a7a:	39 88       	ldd	r3, Y+17	; 0x11
    2a7c:	48 88       	ldd	r4, Y+16	; 0x10
    2a7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a80:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a82:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a84:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a86:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a88:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a8a:	b9 84       	ldd	r11, Y+9	; 0x09
    2a8c:	c8 84       	ldd	r12, Y+8	; 0x08
    2a8e:	df 80       	ldd	r13, Y+7	; 0x07
    2a90:	ee 80       	ldd	r14, Y+6	; 0x06
    2a92:	fd 80       	ldd	r15, Y+5	; 0x05
    2a94:	0c 81       	ldd	r16, Y+4	; 0x04
    2a96:	1b 81       	ldd	r17, Y+3	; 0x03
    2a98:	aa 81       	ldd	r26, Y+2	; 0x02
    2a9a:	b9 81       	ldd	r27, Y+1	; 0x01
    2a9c:	ce 0f       	add	r28, r30
    2a9e:	d1 1d       	adc	r29, r1
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	ed 01       	movw	r28, r26
    2aac:	08 95       	ret

00002aae <_exit>:
    2aae:	f8 94       	cli

00002ab0 <__stop_program>:
    2ab0:	ff cf       	rjmp	.-2      	; 0x2ab0 <__stop_program>
